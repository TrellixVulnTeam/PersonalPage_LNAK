{"version":3,"sources":["./node_modules/@angular/material/badge/_badge-theme.scss","./src/styles.scss","./node_modules/@angular/material/core/typography/_typography.scss","./node_modules/@angular/material/core/typography/_typography-utils.scss","./node_modules/@angular/material/bottom-sheet/_bottom-sheet-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/card/_card-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/table/_table-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/dialog/_dialog-theme.scss","./node_modules/@angular/material/expansion/_expansion-theme.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/form-field/_form-field-legacy-theme.scss","./node_modules/@angular/material/form-field/_form-field-fill-theme.scss","./node_modules/@angular/material/form-field/_form-field-outline-theme.scss","./node_modules/@angular/material/grid-list/_grid-list-theme.scss","./node_modules/@angular/material/core/style/_list-common.scss","./node_modules/@angular/material/input/_input-theme.scss","./node_modules/@angular/material/menu/_menu-theme.scss","./node_modules/@angular/material/paginator/_paginator-theme.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./node_modules/@angular/material/tooltip/_tooltip-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/option/_optgroup-theme.scss","./node_modules/@angular/material/snack-bar/_snack-bar-theme.scss","./node_modules/@angular/material/tree/_tree-theme.scss","./node_modules/@angular/material/core/ripple/_ripple.scss","./node_modules/@angular/cdk/a11y/_index.scss","./node_modules/@angular/cdk/overlay/_index.scss","./node_modules/@angular/cdk/text-field/_index.scss","./node_modules/@angular/material/core/_core.scss","./src/theme.scss","./node_modules/@angular/material/core/ripple/_ripple-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/core/style/_elevation.scss","./node_modules/@angular/material/autocomplete/_autocomplete-theme.scss","./node_modules/@angular/material/button-toggle/_button-toggle-theme.scss","./node_modules/@angular/material/divider/_divider-theme.scss","./node_modules/@angular/material/expansion/_expansion-mixins.scss","./node_modules/@angular/material/core/style/_form-common.scss","./node_modules/@angular/material/form-field/_form-field-standard-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/core/style/_vendor-prefixes.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/sidenav/_sidenav-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@angular/material/sort/_sort-theme.scss","./node_modules/material-design-icons/iconfont/material-icons.css"],"names":[],"mappings":"4IAsME,mBACE,eA3LU,CA4LV,cC7LJ,CDiME,oCAEE,aC/LJ,CDkME,oCACE,cC/LJ,CCmKE,yCCtGE,0BAcF,iBD0FE,eD/JJ,CCkKE,sCC3GE,0BAcF,uBD+FE,eD9JJ,CCiKE,6CChHE,0BAcF,uBDoGE,eD7JJ,CCgKE,6CCrHE,0BAcF,uBDyGE,eD5JJ,CCkKE,2BC7HE,sCDsIA,eDtKJ,CCyKE,2BCzIE,sCDkJA,eD7KJ,CCgLE,6BCrJE,0BAcF,sBFpCF,CC+KE,sCCzJE,0BAcF,sBF/BF,CC6KI,4CACE,eD3KN,CC+KE,wBCjKE,0BAcF,sBFvBF,CC8KE,8CCrKE,4BAcF,wBDyJE,eD1KJ,CC6KE,8CC1KE,0BAcF,wBD8JE,eDzKJ,CC4KE,8CC/KE,0BAcF,iBDmKE,eDxKJ,CC2KE,8CCpLE,0BAcF,uBDwKE,eDvKJ,CG1EE,4BD2DE,0BAcF,sBFMF,CIoEE,4GAGI,mBACA,eACA,eJlEN,CKxEE,gBAEI,eACA,eL0EN,CKtEE,iCACE,cLyEJ,CKtEE,qCAEE,cLyEJ,CMdE,yCACE,gBNiBJ,CO/BE,UACE,eACA,ePkCJ,COhCI,+EAEE,cPkCN,CQ5FE,iBACE,eACA,eR+FJ,CQ5FE,2BACE,cR+FJ,CSgDE,mBACE,cT7CJ,CSgDE,qDAGI,eACA,eT9CN,CSkDE,8BAEI,cA9L6B,CA+L7B,eThDN,CUxIE,kBR0DE,0BAcF,sBFqEF,CWxGE,4BAEI,mBACA,eACA,eX0GN,CWtGE,6BTaE,0BAcF,sBFgFF,CYZE,gBV3FE,iBAiBU,CAhBV,eAiBY,CAhBZ,iBAiBY,CAhBZ,kBAiBY,CAGd,oBFwFF,CYhBE,wBACE,wBZmBJ,CYbI,kEACE,cAvB2B,CAwB3B,iBZiBN,CYbI,gFACE,aACA,WZgBN,CYdM,oGACE,eACA,iBZiBR,CYZE,sBACE,eAEA,+BZcJ,CYVI,kLAvEF,4CAEA,qBZqFF,CYRI,yHA/EF,4CAEA,qBZyFF,CYLE,8BACE,cACA,oBZQJ,CYLE,sBACE,aZQJ,CYLE,0BAGE,gBZMJ,CYHE,kCACE,aA/EoB,CAgFpB,wBAzEqB,CA6ErB,+BZGJ,CazII,0DACE,qBb4IN,CazII,wDACE,iBb2IN,CavIM,oPA3DJ,kFAIA,gDAGA,qBbiMF,CatIM,iKAlEJ,oFAIA,gDAGA,qBbsMF,CanIM,0JA1EJ,oFAIA,gDAGA,qBb2MF,CajII,wDACE,abmIN,CahII,4DAGE,abgIN,Ca7HI,oEACE,wBAjDmB,CAqDnB,+Bb4HN,CatHE,aAGM,oPAzFN,2CbkNA,CalHM,iKAhGN,2CbqNA,Ca7GM,0JAxGN,0CbwNA,CACF,Cc5MI,sDACE,qBd8MN,Cc3MI,sDACE,cACA,gBd6MN,CczMM,gPAlCJ,2CAEA,qBd8OF,CcrMM,wJA3CJ,2CAEA,qBdkPF,Ce9LI,yDACE,afiMN,Ce9LI,yDACE,cACA,iBfgMN,Ce5LM,sPAzCJ,4CAEA,qBfwOF,CexLM,2JAlDJ,4CAEA,qBf4OF,CgB/SE,4CAGE,chBiTJ,CiBrTE,gEARA,mBACA,gBACA,uBAQE,cACA,qBjB0TJ,CiBvTI,8FACE,cjB0TN,CkBlQE,wBACE,mBlBqQJ,CmBhSE,eAEI,mBACA,eACA,enBkSN,CoBzSE,4DAGI,mBACA,cpB2SN,CqBhRE,oBACE,crBmRJ,CsBnLE,6BAGI,eACA,etBoLN,CuBnPE,gBAEI,eACA,evBqPN,CuBjPE,0BACE,evBoPJ,CuBjPE,sBACE,cvBoPJ,CwB/NE,sDDhBI,eACA,evByPN,CwB1OE,6BAEI,kBxBwON,CyBpTE,6GvBOE,0BAcF,uBuBbE,QzBwTJ,C0B/WE,aAEE,cAtBQ,CAuBR,eAtBe,CAuBf,kB1BiXJ,C0B9WE,qBACE,cAxBgB,CAyBhB,eAvBA,CAwBA,kB1BiXJ,C2BzVI,8BACE,c3B4VN,CiB9YE,wCARA,mBACA,gBACA,uBAQE,cACA,qBjBkZJ,CiB/YI,uDACE,cjBiZN,C2BlWI,gCACE,c3BoWN,CiB3ZE,0CARA,mBACA,gBACA,uBAQE,cACA,qBjB+ZJ,CiB5ZI,yDACE,cjB8ZN,C2B1WI,8BACE,mBACA,eACA,e3B4WN,C2BtWI,qCACE,c3ByWN,CiB9aE,+CARA,mBACA,gBACA,uBAQE,cACA,qBjBkbJ,C2B5WI,qGACE,c3BiXN,CiB3bE,iDARA,mBACA,gBACA,uBAQE,cACA,qBjB+bJ,CiB5bI,gEACE,cjB8bN,C2BvXI,qCAEE,eACA,e3BwXN,C4BhaE,YAGI,c5BiaN,C6BncE,oB3B2DE,0BAcF,sBF+XF,C8BhcE,qBAEI,mBACA,c9BkcN,C8B9bE,4BACE,cAEE,oBACA,kBACA,e9BgcN,C+B5cE,qCAEE,gBACA,c/B+cJ,CgC1eE,YACE,gBAIA,iBhC0eJ,CgCneI,wBACE,uBhCqeN,CgCjeE,iCACE,gBhCoeJ,CgCjeE,oBACE,kBACA,kBACA,oBAEA,wDACA,kBhCmeJ,CiC5dI,8CDHE,YhCkeN,CiCngBE,qBACE,SACA,mBACA,WACA,YACA,gBACA,UACA,kBACA,UAIA,mBAGA,UAGA,wBACA,oBjC+fJ,CkCrgBE,mDAEE,oBAGA,MACA,OACA,YACA,UlCqgBJ,CkCjgBE,uBACE,eACA,YlCogBJ,CkClgBI,6BAGE,YlCkgBN,CkCnfE,8CANE,aACA,kBACA,YlCugBJ,CkCngBE,kBAIE,oBACA,sBAMA,eACA,elCufJ,CkCpfE,sBAEE,kBACA,MACA,SACA,OACA,QAEA,YApEuB,CAqEvB,oBACA,wCACA,kDACA,SlCqfJ,CkCnfI,mDACE,SlCqfN,CkChfM,6EAGE,UlCgfR,CkC3eE,2BACE,oBlC8eJ,CkCteI,iGACE,SlCyeN,CkCneE,6CACE,kBACA,YA3Gc,CAgHd,aAIA,sBAGA,cACA,clC6dJ,CkCzdE,wBACE,eAKA,WAKA,iBlCodJ,CmC3lBE,+BACE,WnC8lBJ,CmCxlBE,yCAyCA,wBACA,6BAxCE,sBACA,yBnC4lBJ,CmCnlBE,iDA6BA,wBACA,6BA5BE,kBnCulBJ,CmC7kBE;EAA0C,KnCilB5C,CmChlBE;EAAwC,KnCmlB1C,CmCjlBE,oDAEE,8CnCklBJ,CmC/kBE,0DAEE,4CnCilBJ,CoC/lBE,8CACE,iBpCsmBJ,CqChfA,KACE,wBACA,gCACA,+BACA,0BACA,uCACA,iCAgBA,uBACA,+BACA,8BACA,8BACA,sCACA,qCAgBA,iBACA,6BACA,wBACA,uBACA,oCACA,6BrCycF,CsCpoBE,oBAII,0BtCspBN,C4BxpBE,YACE,e5B2pBJ,C4BnpBI,qKACE,oB5BwpBN,C4BrpBI,uBACE,qBACA,e5BupBN,C4BppBI,gCACE,e5BspBN,C4BlpBE,gEACE,a5BqpBJ,C4BlpBE,+DACE,a5BqpBJ,C4BlpBE,6DACE,S5BqpBJ,C6BzrBE,oBACE,e7B4rBJ,C6BzrBE,2CACE,e7B4rBJ,CuCvrBE,qBACE,evC0rBJ,CuCxrBI,2BACE,avC0rBN,CuCtrBE,8BACE,avCyrBJ,CuCtrBE,0FAEE,kBvCyrBJ,CuCjrBE,wJAIE,kBvCorBJ,CuCjrBE,oFAEE,cvCorBJ,CuC/qBI,0HACE,kBvCmrBN,CwC5tBE,oBAIE,yBACA,exC4tBJ,CwCrtBI,kBCkIF,4DzCulBF,CwCztBI,kBCkIF,2EzC2lBF,CwC7tBI,kBCkIF,2EzC+lBF,CwCjuBI,kBCkIF,2EzCmmBF,CwCruBI,kBCkIF,4EzCumBF,CwCzuBI,kBCkIF,4EzC2mBF,CwC7uBI,kBCkIF,6EzC+mBF,CwCjvBI,kBCkIF,iFzCmnBF,CwCrvBI,kBCkIF,iFzCunBF,CwCzvBI,kBCkIF,iFzC2nBF,CwC7vBI,mBCkIF,kFzC+nBF,CwCjwBI,mBCkIF,kFzCmoBF,CwCrwBI,mBCkIF,kFzCuoBF,CwCzwBI,mBCkIF,kFzC2oBF,CwC7wBI,mBCkIF,kFzC+oBF,CwCjxBI,mBCkIF,kFzCmpBF,CwCrxBI,mBCkIF,mFzCupBF,CwCzxBI,mBCkIF,mFzC2pBF,CwC7xBI,mBCkIF,mFzC+pBF,CwCjyBI,mBCkIF,mFzCmqBF,CwCryBI,mBCkIF,oFzCuqBF,CwCzyBI,mBCkIF,oFzC2qBF,CwC7yBI,mBCkIF,oFzC+qBF,CwCjzBI,mBCkIF,oFzCmrBF,CwCrzBI,mBCkIF,oFzCurBF,C0C30BE,wBAEE,gBACA,e1Ci1BJ,CyCrrBE,sDAXA,4EzCmsBF,C0C70BI,8EACE,e1C+0BN,C0C70BM,wGACE,e1C+0BR,CD/vBE,mBACE,WACA,kBCkwBJ,CiCp0BI,6ClCqEE,kBACA,eCkwBN,CD7vBI,qCACE,mBACA,eCgwBN,CD3vBI,mCACE,WACA,cC8vBN,CD1vBE,WACE,iBC6vBJ,CDzvBI,qCACE,YC4vBN,CDvvBI,uCAWI,mBAMF,eC2uBN,CDvuBE,mBACE,kBACA,kBACA,qBACA,kBACA,qCACA,oBACA,gBACA,mBACA,uBACA,mBC0uBJ,CDvuBE,mFAEE,eC0uBJ,CDruBE,oCAEE,cCuuBJ,CDv4BE,oCACE,UARS,CAST,WATS,CAUT,gBC04BJ,CDt4BI,oDACE,QCw4BN,CDn4BI,oDACE,WCq4BN,CDh4BI,qDACE,UCk4BN,CD73BI,+DACE,UACA,WC+3BN,CD13BI,oDACE,WC43BN,CDv3BI,8DACE,WACA,UCy3BN,CDn3BM,uEACE,SCq3BR,CDh3BM,iFACE,UACA,UCk3BR,CD72BM,sEACE,UC+2BR,CD12BM,gFACE,WACA,SC42BR,CD/6BE,qCACE,UATW,CAUX,WAVW,CAWX,gBCk7BJ,CD96BI,qDACE,SCg7BN,CD36BI,qDACE,YC66BN,CDx6BI,sDACE,UC06BN,CDr6BI,gEACE,UACA,WCu6BN,CDl6BI,qDACE,WCo6BN,CD/5BI,+DACE,WACA,UCi6BN,CD35BM,wEACE,UC65BR,CDx5BM,kFACE,UACA,WC05BR,CDr5BM,uEACE,WCu5BR,CDl5BM,iFACE,WACA,UCo5BR,CDv9BE,oCACE,UAPS,CAQT,WARS,CAST,gBC09BJ,CDt9BI,oDACE,SCw9BN,CDn9BI,oDACE,YCq9BN,CDh9BI,qDACE,UCk9BN,CD78BI,+DACE,UACA,WC+8BN,CD18BI,oDACE,WC48BN,CDv8BI,8DACE,WACA,UCy8BN,CDn8BM,uEACE,UCq8BR,CDh8BM,iFACE,UACA,WCk8BR,CD77BM,sEACE,WC+7BR,CD17BM,gFACE,WACA,UC47BR,CGzgCE,4BsCkJA,oFtChJE,gBACA,eH4gCJ,CI17BE,iDAKE,cACA,gBJy7BJ,CIz9BE,qFACE,aJ29BJ,CIz9BE,kFACE,aJ29BJ,CIz9BE,4EACE,SJ29BJ,CIv9BI,glBAEE,eJw9BN,CI3hCE,mKACE,wBJ6hCJ,CI1hCE,gKACE,wBJ4hCJ,CIzhCE,0JACE,oBJ2hCJ,CIxhCE,2LACE,wBJ0hCJ,CIz8BI,6GACE,UAxGY,CAyGZ,6BJ28BN,CIv8BE,0BACE,eJ08BJ,CIr8BE,8CACE,sBJw8BJ,CIr8BE,2DAEE,gBACA,qBJu8BJ,CIlgCE,2GACE,UJogCJ,CIlgCE,uGACE,eJogCJ,CIlgCE,+FACE,UJogCJ,CIhgCI,4vBAEE,eJigCN,CI9gCE,2GACE,wBJghCJ,CI9gCE,uGACE,wBJghCJ,CI9gCE,+FACE,oBJghCJ,CI5gCI,4vBAEE,0BJ6gCN,CI/iCE,2LAXA,0BJ6jCF,CI9iCE,uLAfA,0BJgkCF,CI7iCE,+KAnBA,0BJmkCF,CyCj8BE,iGAXA,4DzCg9BF,CyCr8BE,iDAXA,2EzCo9BF,CyCz8BE,kFAXA,iFzCu9BF,CyC58BE,qEAXA,4DzC09BF,CyC/8BE,mFAXA,6EzC89BF,CyCn9BE,qJAXA,kFzCi+BF,CyCt9BE,2HAXA,4DzCo+BF,C2CnnCE,uDF+IA,2EzCy+BF,C2CnnCE,iHAEE,e3CsnCJ,C2CnnCE,mBACE,e3CsnCJ,C2CpnCI,oDACE,0B3CsnCN,C2ClnCE,uCACE,gBACA,e3CqnCJ,C2CnnCI,wEACE,qB3CqnCN,C2CjnCE,mFACE,+B3ConCJ,C2CjnCE,6FACE,iBACA,gC3ConCJ,C2ChnCI,8GACE,iBACA,kBACA,8B3CmnCN,C2C/mCE,2BACE,yBACA,e3CknCJ,C2ChnCI,iEACE,e3CknCN,C2C9mCE,4BACE,gBACA,wB3CinCJ,C2C/mCI,kEACE,e3CinCN,C2C9mCI,sDACE,wB3CgnCN,C2C5mCE,iHAEE,0B3C+mCJ,C2C7lCI,wEACE,gB3CgmCN,CKzrCE,UAEE,gBACA,eL2rCJ,CyCliCE,wCAXA,2EzCgjCF,CyCriCE,sDAXA,4DzCmjCF,CKzrCE,mBACE,eL4rCJ,CM1rCE,oBACE,sBN6rCJ,CM1rCE,wBACE,YN6rCJ,CM1rCE,6BAGE,wBN2rCJ,CMxrCE,wBACE,wBN2rCJ,CMvrCI,4HACE,wBN0rCN,CMvrCI,0HACE,wBNyrCN,CMtrCI,sHACE,oBNwrCN,CMjrCM,gJACE,wBNorCR,CM/qCM,sEACE,oBNirCR,CM7qCI,2CACE,eN+qCN,CMzqCE,kCACE,qBN4qCJ,CMvqCI,mKACE,kBN2qCN,CMxqCI,iKACE,kBN2qCN,CMxqCI,6JACE,cN2qCN,COntCE,4BA5CA,wBAyCwB,CAxCxB,ePmwCF,COjwCE,6CACE,eAsCsB,CArCtB,UPmwCJ,COxtCM,2DkCmGJ,2EzCwnCF,COvtCM,2EACE,WPytCR,COrtCI,8CACE,UPutCN,COptCI,kCACE,ePstCN,COjtCI,0DAnEF,wBAyBE,CAxBF,UPwxCF,COtxCE,2EACE,UAoBsB,CAnBtB,UPwxCJ,COlwCE,8EAVA,0BP+wCF,COztCI,uDAvEF,oBAyBE,CAxBF,UPmyCF,COjyCE,wEACE,UAoBsB,CAnBtB,UPmyCJ,CO7wCE,2EAVA,0BP0xCF,COhuCI,yDA3EF,wBAyBE,CAxBF,eP8yCF,CO5yCE,0EACE,eAoBsB,CAnBtB,UP8yCJ,COxxCE,6EAVA,0BPqyCF,CQtzCE,WACE,eRyzCJ,CQtzCE,uJAIE,kBRyzCJ,CQtzCE,wFAEE,6BRyzCJ,CQtzCE,iBACE,eRyzCJ,CQtzCE,2BACE,eRyzCJ,CSpxCE,oBACE,0BTuxCJ,CSlxCE,+HAGE,eTqxCJ,CSlxCE,2BACE,eTqxCJ,CSlxCE,yCACE,oBTqxCJ,CSlxCE,yBACE,eTqxCJ,CSlxCE,gEAEE,gBACA,kBTqxCJ,CS5wCE,mMACE,eTmxCJ,CShxCE,8BAOI,eT6wCN,CSv0CE,uGAqEI,sBTswCN,CS30CE,mIA8EM,sBTiwCR,CS/qCE,mCACE,oBTkrCJ,CS/qCE,sFAEE,oBTkrCJ,CS/qCE,4GAEE,2DTkrCJ,CS/qCE,4GAEE,4DTkrCJ,CS/qCE,4IAEE,kBTkrCJ,CS/qCE,sIAEE,kBTkrCJ,CSh5CE,4BACE,yBACA,UTm5CJ,CSh5CE,wDAII,0BTg5CN,CSv4CE,oDACE,+BT04CJ,CSz3CE,weARM,0BTu4CR,CSnyCE,wBgCQA,6EhCNE,sBACA,eTsyCJ,CSruCE,sEACE,oBTuuCJ,CSpuCE,4JAEE,oBTsuCJ,CSnuCE,kLAEE,2DTquCJ,CSluCE,kLAEE,4DTouCJ,CSjuCE,kNAEE,kBTmuCJ,CShuCE,4MAEE,kBTkuCJ,CSh8CE,+DACE,yBACA,eTk8CJ,CS/7CE,2FAII,0BT87CN,CSr7CE,uFACE,oCTu7CJ,CSt6CE,ilBARM,0BTm7CR,CS3wCE,oEACE,gBT6wCJ,CS1wCE,wJAEE,oBT4wCJ,CSzwCE,8KAEE,uDT2wCJ,CSxwCE,8KAEE,wDT0wCJ,CSvwCE,8MAEE,kBTywCJ,CStwCE,wMAEE,kBTwwCJ,CSt+CE,6DACE,qBACA,UTw+CJ,CSr+CE,yFAII,sBTo+CN,CS39CE,qFACE,+BT69CJ,CS58CE,2kBARM,0BTy9CR,CSv2CE,8BgCNA,oFzCi3CF,CSv2CE,8BACE,aT02CJ,CSx2CI,yCACE,aT02CN,CSv2CI,uCACE,STy2CN,CSr2CE,sCACE,eTw2CJ,CUhhDE,sB+BiJA,qF/B/IE,gBACA,eVmhDJ,C4C3hDE,aACE,0B5C8hDJ,C4C3hDE,sBACE,4B5C8hDJ,CW5hDE,qBAEE,gBACA,eX8hDJ,CyCv4CE,mDAXA,2EzCq5CF,CW9hDE,gBACE,0BXiiDJ,C6CjjDM,mSlCoBF,oBXiiDJ,CW5hDE,oBACE,oGAEE,eX8hDJ,CACF,CW3hDE,kCACE,eX6hDJ,CW1hDE,uEAEE,eX6hDJ,CW1hDE,gDACE,eX6hDJ,CW3hDI,0KAEE,aX6hDN,CWhgDI,4BACE,WXmgDN,CWjgDM,yCACE,WXmgDR,CYljDE,gCACE,WZyjDJ,CYtjDE,kDACE,aZyjDJ,CYvjDI,6DACE,aZyjDN,CYtjDI,2DACE,SZwjDN,CYpjDE,6CACE,aZujDJ,CYpjDE,uBACE,0BZujDJ,CYnjDI,mDACE,wBZsjDN,CYpjDM,8DACE,wBZsjDR,CYnjDM,4DACE,oBZqjDR,CY/iDI,4GACE,aZkjDN,CY/iDI,uHACE,aZijDN,CYliDM,uVAEE,SZ2iDR,CYviDI,uIAEE,oBZyiDN,CYriDE,WACE,SZwiDJ,Ca9nDI,oGACE,ebooDN,CajoDI,4DACE,0BbmoDN,CahoDI,oFiCxBF,0EACA,yBACA,0B9C2pDF,C+CrpDI,8DACE,0B/CwpDN,C+CrpDI,sFDZF,0EACA,yBACA,0B9CoqDF,CcvpDI,qDACE,0Bd0pDN,CcvpDI,6EACE,0BdypDN,CctpDI,iEACE,0BdwpDN,CcppDM,8EACE,edspDR,CcnpDM,yFACE,wBdqpDR,CejqDI,2DACE,efoqDN,CejqDI,iEACE,efmqDN,Ce/pDM,6EACE,afiqDR,Ce9pDM,wFACE,afgqDR,CetpDM,qMACE,Sf2pDR,CetpDM,iFACE,efwpDR,CerpDM,mFACE,efupDR,CgD1sDI,sBACE,ahD6sDN,CgD1sDI,qBACE,ahD4sDN,CgDzsDI,mBACE,ShD2sDN,CkBhtDE,mEACE,elBmtDJ,CkBhtDE,uHAEE,elBmtDJ,CkBhtDE,mBACE,mBlBmtDJ,CiDpuDE,gC/BoBI,elBmtDN,CiDnuDE,qC/BgBI,elBstDN,CiDluDE,8C/BYI,elBytDN,CiDjuDE,yC/BQI,elB4tDN,CkBzsDE,8CACE,mBlB4sDJ,CkBzsDE,uFAEE,elB4sDJ,CkBzsDE,0FACE,SlB4sDJ,C2BrvDI,8DACE,e3B2vDN,C2BxvDI,8BACE,e3B0vDN,C2BtvDE,wBACE,wB3ByvDJ,C2BnvDI,gMACE,oB3B0vDN,C2BrvDI,+GACE,oB3BwvDN,CmBpxDE,gBAEE,enBsxDJ,CyC5nDE,8CAXA,4EzC0oDF,CmBtxDE,eACE,iBACA,enByxDJ,CmBtxDM,oGAGE,enBuxDR,CmBlxDE,uEAEE,enBqxDJ,CmB9wDI,uLACE,oBnBoxDN,CoBhzDE,eACE,epBmzDJ,CoBhzDE,4DAEE,epBmzDJ,CoBhzDE,kDAEE,+BACA,gCpBmzDJ,CoBhzDE,yCAEE,8BpBmzDJ,CoB/yDI,uMAIE,sBpBkzDN,CoB3xDI,yBACE,epB8xDN,CkDp0DE,6BACE,YlDu0DJ,CkDp0DE,yBACE,wBlDu0DJ,CkDp0DE,6BACE,wBlDu0DJ,CkDn0DI,0DACE,YlDs0DN,CkDn0DI,sDACE,wBlDq0DN,CkDl0DI,0DACE,wBlDo0DN,CkD/zDI,wDACE,YlDk0DN,CkD/zDI,oDACE,wBlDi0DN,CkD9zDI,wDACE,oBlDg0DN,CmDj3DI,iDACE,cnDo3DN,CmDj3DI,uEACE,cnDm3DN,CmDh3DI,mEACE,UnDk3DN,CoD32DE,wBACE,sBpD82DJ,CoDn4DE,wEACE,oBpDs4DJ,CoDn4DE,2SAIE,wBpDm4DJ,CoD34DE,uEACE,oBpD64DJ,CoD14DE,uSAIE,wBpD04DJ,CoDl5DE,qEACE,gBpDo5DJ,CoDj5DE,+RAIE,oBpDi5DJ,CoDh3DM,4IAEE,sBpDk3DR,CoD/2DM,wIAEE,0BpDi3DR,CoD92DM,8DACE,epDg3DR,CoD12DI,sCACE,qBpD42DN,CqB75DE,kBACE,erBg6DJ,CqB75DE,wBACE,erBg6DJ,CqB75DE,uCACE,erBg6DJ,CqB75DE,kBACE,erBg6DJ,CqB75DE,kBACE,erBg6DJ,CyCzxDE,gDAXA,4EzCuyDF,CqBh6DI,qEACE,oBrBk6DN,CqB55DM,0DACE,arB+5DR,CqB55DM,yDACE,arB85DR,CqBt5DI,wHACE,SrB25DN,CqBx5DI,kEACE,erB05DN,CqDp8DE,sBACE,wBALmC,CAMnC,erDu8DJ,CqDp8DE,YAEE,erDu8DJ,CqDr8DI,wCAHA,qBrD28DJ,CqDp8DI,kCZ6HF,mFzC00DF,CqDh8DE,iBACE,gCrDm8DJ,CqD37DE,2DACE,+BAhCmB,CAiCnB,iBrDk8DJ,CqDh8DI,0CACE,iBACA,gCrDk8DN,CqD97DE,sCAQI,sBrD07DN,CsDn/DI,sDACE,wBtDs/DN,CsDn/DI,oDAGE,0BtDm/DN,CsDh/DI,kDAGE,wBtDg/DN,CsD7/DI,kEACE,wBtD+/DN,CsD5/DI,gEAGE,0BtD4/DN,CsDz/DI,8DAGE,wBtDy/DN,CsDtgEI,+DACE,oBtDwgEN,CsDrgEI,6DAGE,0BtDqgEN,CsDlgEI,2DAGE,oBtDkgEN,CsD79DI,wDAGE,qBtD69DN,CsDz9DE,wBb2FA,4EazFE,wBtD49DJ,CsDz9DE,sBACE,0BtD49DJ,CsBl/DE,6BACE,0BtBq/DJ,CsBjiEE,wGAGE,wBtBoiEJ,CsBjiEE,0CACE,UtBmiEJ,CsBhiEE,oCAGE,0BtBgiEJ,CsB7iEE,qGAGE,wBtBgjEJ,CsB7iEE,yCACE,etB+iEJ,CsB5iEE,mCAGE,0BtB4iEJ,CsBzjEE,+FAGE,oBtB4jEJ,CsBzjEE,uCACE,UtB2jEJ,CsBxjEE,iCAGE,sBtBwjEJ,CsBxgEI,yFACE,0BtB4gEN,CsBhgEM,6LACE,0BtBwgER,CsBlgEI,6CAGE,0BtBmgEN,CsBz/DM,oJAEE,0BtB2/DR,CsBv/DQ,4KAEE,0BtBy/DV,CsBn/DM,6EACE,sBA9EiB,CA+EjB,wBtBq/DR,CsBh/DQ,4KACE,sBtBk/DV,CsB/+DQ,oNACE,sBtBi/DV,CsB3+DE,gDACE,sBtB8+DJ,CsBr+DE,yCACE,wFAIA,+FtBq+DJ,CsB39DE,uCACE,wFtB89DJ,CuB7mEI,kGAGE,0BvB8mEN,CuBxmEI,oBACE,uBACE,evB0mEN,CACF,CuBvmEI,qEAIE,evBumEN,CuBpmEI,gCAGE,2BACA,UvBomEN,CuBjmEI,+HAGE,yBACA,UvBmmEN,CuB/lEM,2CACE,evBimER,CuB9lEM,gKAGE,yBACA,evBgmER,CuB3lEM,yCACE,UvB6lER,CuB1lEM,0JAGE,qBACA,UvB4lER,CuBxlEI,4CACE,yBACA,SvB0lEN,CuBvlEI,uDACE,evBylEN,CuBtlEI,sDACE,SvBwlEN,CuBplEE,8CACE,qBvBulEJ,CuBplEE,kCACE,2BvBulEJ,CuBplEE,wGAGE,0BvBulEJ,CuB9iEI,+BACE,WvBijEN,CuB9iEI,+FAEE,YvBijEN,CuB5iEI,kCACE,UACA,YvB+iEN,CuBpiEI,iNACE,QvB2iEN,CuD1sEE,uBAYI,avDksEN,CwB1sEE,iCAEE,iCxB6sEJ,CwBzsEI,+FAEE,8BAVY,CAWZ,kBxB4sEN,CwBxsEE,6BACE,exB2sEJ,CwBzsEI,+DACE,exB2sEN,CwBvsEE,mCACE,sBxB0sEJ,CwBvsEE,uEACE,sBxB0sEJ,CwBtsEE,gGAEE,mBACA,exBysEJ,CwB3pEM,grBACE,0BxBkqER,CwB7qEE,kFACE,wBxB+qEJ,CwBhrEE,gVACE,qBxBkrEJ,CwBzqEM,wqBACE,0BxB+qER,CwB1rEE,gFACE,wBxB4rEJ,CwB7rEE,wUACE,0BxB+rEJ,CwBtrEM,wpBACE,0BxB4rER,CwBvsEE,4EACE,oBxBysEJ,CwB1sEE,wTACE,qBxB4sEJ,CwBnsEM,wwBACE,0BxBysER,CwB9rEE,gXACE,wBxBgsEJ,CwB5rEE,sSACE,UxB8rEJ,CwB5rEI,0WACE,WxB8rEN,CwBzrEE,0tBAIE,iBxB8rEJ,CwB3rEE,wdAEE,kBxB8rEJ,CwBzrEE,weAGE,0BxB6rEJ,CwBxuEM,gwBACE,0BxB8uER,CwBnuEE,0WACE,wBxBquEJ,CwBjuEE,kSACE,exBmuEJ,CwBjuEI,sWACE,WxBmuEN,CwB9tEE,ktBAIE,sBxBmuEJ,CwBhuEE,odAEE,kBxBmuEJ,CwB9tEE,keAGE,0BxBkuEJ,CwB7wEM,gvBACE,0BxBmxER,CwBxwEE,8VACE,oBxB0wEJ,CwBtwEE,0RACE,UxBwwEJ,CwBtwEI,8VACE,WxBwwEN,CwBnwEE,ksBAIE,iBxBwwEJ,CwBrwEE,4cAEE,kBxBwwEJ,CwBnwEE,sdAGE,0BxBuwEJ,CyB71EE,aACE,mBACA,ezBg2EJ,CyB91EI,yBApCF,mBACA,UzBq4EF,CyB91EI,wBAxCF,mBACA,ezBy4EF,CyB91EI,sBA5CF,eACA,UzB64EF,CyBz4EE,4HAGE,6BzB24EJ,CyBx4EE,4MAKE,azB04EJ,CyBv4EE,gCACE,wBzBy4EJ,CyBt6EE,2BACE,ezBy6EJ,CyBv6EE,yCACE,WzB06EJ,CyBp1EI,yBA1FF,2BACE,ezBk7EF,CyBh7EA,yCACE,WzBm7EF,CACF,C0B/6EE,aACE,oB1Bi7EJ,C+Bx7EE,UACE,e/B27EJ,C+Bx7EE,qCAEE,e/B27EJ,C+Bn6EI,eACE,e/Bs6EN,C8Br8EE,yBAGE,gBACA,mBW6IF,6EzC0zEF,C8Bl8EE,4BACE,a9Bq8EJ,CsCh9EE,qCAII,0BtCg9EN,C4Bl9EE,6BACE,U5Bo9EJ,C4B58EI,wNACE,oB5Bi9EN,C4B98EI,wCACE,qBACA,U5Bg9EN,C4B78EI,iDACE,e5B+8EN,C4B38EE,iFACE,a5B68EJ,C4B18EE,gFACE,a5B48EJ,C4Bz8EE,8EACE,S5B28EJ,C6B/+EE,qCACE,e7Bi/EJ,C6B9+EE,4DACE,e7Bg/EJ,CuC3+EE,sCACE,evC6+EJ,CuC3+EI,4CACE,avC6+EN,CuCz+EE,+CACE,avC2+EJ,CuCx+EE,4HAEE,kBvC0+EJ,CuCl+EE,4NAIE,kBvCo+EJ,CuCj+EE,sHAEE,cvCm+EJ,CuC99EI,4JACE,kBvCi+EN,CwC1gFE,yEAIE,yBACA,UxCygFJ,CwClgFI,mCCkIF,4DzCm4EF,CwCrgFI,mCCkIF,2EzCs4EF,CwCxgFI,mCCkIF,2EzCy4EF,CwC3gFI,mCCkIF,2EzC44EF,CwC9gFI,mCCkIF,4EzC+4EF,CwCjhFI,mCCkIF,4EzCk5EF,CwCphFI,mCCkIF,6EzCq5EF,CwCvhFI,mCCkIF,iFzCw5EF,CwC1hFI,mCCkIF,iFzC25EF,CwC7hFI,mCCkIF,iFzC85EF,CwChiFI,oCCkIF,kFzCi6EF,CwCniFI,oCCkIF,kFzCo6EF,CwCtiFI,oCCkIF,kFzCu6EF,CwCziFI,oCCkIF,kFzC06EF,CwC5iFI,oCCkIF,kFzC66EF,CwC/iFI,oCCkIF,kFzCg7EF,CwCljFI,oCCkIF,mFzCm7EF,CwCrjFI,oCCkIF,mFzCs7EF,CwCxjFI,oCCkIF,mFzCy7EF,CwC3jFI,oCCkIF,mFzC47EF,CwC9jFI,oCCkIF,oFzC+7EF,CwCjkFI,oCCkIF,oFzCk8EF,CwCpkFI,oCCkIF,oFzCq8EF,CwCvkFI,oCCkIF,oFzCw8EF,CwC1kFI,oCCkIF,oFzC28EF,CwCtkFI,yBACE,YxCwkFN,C0ClmFE,yCAEE,mBACA,U1ComFJ,CyCx8EE,uEAXA,4EzCs9EF,C0ChmFI,+FACE,kB1CkmFN,C0ChmFM,yHACE,U1CkmFR,CDlhFE,oCACE,WACA,kBCohFJ,CiCtlFI,8DlCqEE,kBACA,eCohFN,CD/gFI,sDACE,mBACA,eCkhFN,CD7gFI,oDACE,WACA,cC+gFN,CD3gFE,4BACE,iBC6gFJ,CDzgFI,sDACE,YC2gFN,CDtgFI,wDAWI,mBAMF,eCy/EN,CDr/EE,oCACE,kBACA,kBACA,qBACA,kBACA,qCACA,oBACA,gBACA,mBACA,uBACA,mBCu/EJ,CDp/EE,qHAEE,eCs/EJ,CDj/EE,qDAEE,cCk/EJ,CDlpFE,qDACE,UARS,CAST,WATS,CAUT,gBCopFJ,CDhpFI,qEACE,QCkpFN,CD7oFI,qEACE,WC+oFN,CD1oFI,sEACE,UC4oFN,CDvoFI,gFACE,UACA,WCyoFN,CDpoFI,qEACE,WCsoFN,CDjoFI,+EACE,WACA,UCmoFN,CD7nFM,wFACE,SC+nFR,CD1nFM,kGACE,UACA,UC4nFR,CDvnFM,uFACE,UCynFR,CDpnFM,iGACE,WACA,SCsnFR,CDzrFE,sDACE,UATW,CAUX,WAVW,CAWX,gBC2rFJ,CDvrFI,sEACE,SCyrFN,CDprFI,sEACE,YCsrFN,CDjrFI,uEACE,UCmrFN,CD9qFI,iFACE,UACA,WCgrFN,CD3qFI,sEACE,WC6qFN,CDxqFI,gFACE,WACA,UC0qFN,CDpqFM,yFACE,UCsqFR,CDjqFM,mGACE,UACA,WCmqFR,CD9pFM,wFACE,WCgqFR,CD3pFM,kGACE,WACA,UC6pFR,CDhuFE,qDACE,UAPS,CAQT,WARS,CAST,gBCkuFJ,CD9tFI,qEACE,SCguFN,CD3tFI,qEACE,YC6tFN,CDxtFI,sEACE,UC0tFN,CDrtFI,gFACE,UACA,WCutFN,CDltFI,qEACE,WCotFN,CD/sFI,+EACE,WACA,UCitFN,CD3sFM,wFACE,UC6sFR,CDxsFM,kGACE,UACA,WC0sFR,CDrsFM,uFACE,WCusFR,CDlsFM,iGACE,WACA,UCosFR,CGjxFE,6CsCkJA,oFtChJE,mBACA,UHmxFJ,CIjsFE,oGAKE,cACA,gBJ+rFJ,CI/tFE,wIACE,aJiuFJ,CI/tFE,qIACE,aJiuFJ,CI/tFE,+HACE,SJiuFJ,CI7tFI,4xBAEE,eJ8tFN,CIjyFE,sNACE,wBJmyFJ,CIhyFE,mNACE,wBJkyFJ,CI/xFE,6MACE,oBJiyFJ,CI9xFE,8OACE,wBJgyFJ,CI/sFI,gKACE,UAxGY,CAyGZ,6BJitFN,CI7sFE,2CACE,eJ+sFJ,CI1sFE,+DACE,sBJ4sFJ,CIzsFE,+HAEE,WACA,wBJ0sFJ,CIrwFE,+KACE,UJuwFJ,CIrwFE,2KACE,eJuwFJ,CIrwFE,mKACE,UJuwFJ,CInwFI,4gCAEE,eJowFN,CIjxFE,+KACE,wBJmxFJ,CIjxFE,2KACE,wBJmxFJ,CIjxFE,mKACE,oBJmxFJ,CI/wFI,4gCAEE,0BJgxFN,CIlzFE,+PAXA,0BJg0FF,CIjzFE,2PAfA,0BJm0FF,CIhzFE,mPAnBA,0BJs0FF,CyCpsFE,mIAXA,4DzCktFF,CyCvsFE,kEAXA,2EzCqtFF,CyC1sFE,mGAXA,iFzCwtFF,CyC7sFE,sFAXA,4DzC2tFF,CyChtFE,qHAXA,6EzC8tFF,CyCntFE,uLAXA,kFzCiuFF,CyCttFE,6JAXA,4DzCouFF,C2Cn3FE,yFF+IA,2EzCwuFF,C2Cl3FE,mJAEE,e3Co3FJ,C2Cj3FE,oCACE,e3Cm3FJ,C2Cj3FI,qEACE,0B3Cm3FN,C2C/2FE,wDACE,WACA,kB3Ci3FJ,C2C/2FI,yFACE,qB3Ci3FN,C2C72FE,oGACE,+B3C+2FJ,C2C52FE,8GACE,iBACA,gC3C82FJ,C2C12FI,+HACE,iBACA,kBACA,8B3C42FN,C2Cx2FE,4CACE,yBACA,e3C02FJ,C2Cx2FI,kFACE,U3C02FN,C2Ct2FE,6CACE,gBACA,wB3Cw2FJ,C2Ct2FI,mFACE,kB3Cw2FN,C2Cr2FI,uEACE,wB3Cu2FN,C2Cn2FE,mJAEE,0B3Cq2FJ,CK36FE,2BAEE,mBACA,UL46FJ,CyCnxFE,yDAXA,2EzCiyFF,CyCtxFE,uEAXA,4DzCoyFF,CK16FE,oCACE,eL46FJ,CM16FE,qCACE,sBN46FJ,CMz6FE,yCACE,YN26FJ,CMx6FE,8CAGE,wBNw6FJ,CMr6FE,yCACE,wBNu6FJ,CMn6FI,8JACE,wBNq6FN,CMl6FI,4JACE,wBNo6FN,CMj6FI,wJACE,oBNm6FN,CM55FM,kLACE,wBN85FR,CMz5FM,uFACE,oBN25FR,CMv5FI,4DACE,eNy5FN,CMn5FE,mDACE,qBNq5FJ,CMh5FI,qMACE,kBNm5FN,CMh5FI,mMACE,kBNm5FN,CMh5FI,+LACE,cNm5FN,CO37FE,6CA5CA,wBAyCwB,CAxCxB,UP0+FF,COx+FE,8DACE,UAsCsB,CArCtB,UP0+FJ,CO/7FM,4EkCmGJ,2EzC+1FF,CO97FM,4FACE,WPg8FR,CO57FI,+DACE,UP87FN,CO37FI,mDACE,eP67FN,COx7FI,2EAnEF,wBAyBE,CAxBF,UP8/FF,CO5/FE,4FACE,UAoBsB,CAnBtB,UP8/FJ,COx+FE,+FAVA,0BPq/FF,CO/7FI,wEAvEF,oBAyBE,CAxBF,UPygGF,COvgGE,yFACE,UAoBsB,CAnBtB,UPygGJ,COn/FE,4FAVA,0BPggGF,COt8FI,0EA3EF,wBAyBE,CAxBF,ePohGF,COlhGE,2FACE,eAoBsB,CAnBtB,UPohGJ,CO9/FE,8FAVA,0BP2gGF,CQ5hGE,4BACE,kBR8hGJ,CQ3hGE,iUAIE,kBR6hGJ,CQ1hGE,8LAEE,6BR4hGJ,CQzhGE,kCACE,eR2hGJ,CQxhGE,6DACE,UR0hGJ,CSr/FE,qCACE,qBTu/FJ,CSl/FE,kLAGE,UTo/FJ,CSj/FE,4CACE,eTm/FJ,CSh/FE,0DACE,oBTk/FJ,CS/+FE,0CACE,eTi/FJ,CS9+FE,kGAEE,WACA,kBTg/FJ,CSv+FE,qOACE,eT4+FJ,CSz+FE,+CAOI,eTq+FN,CS/hGE,wHAqEI,sBT69FN,CSliGE,oJA8EM,sBTu9FR,CSr4FE,oDACE,oBTu4FJ,CSp4FE,wHAEE,oBTs4FJ,CSn4FE,8IAEE,2DTq4FJ,CSl4FE,8IAEE,4DTo4FJ,CSj4FE,8KAEE,kBTm4FJ,CSh4FE,wKAEE,kBTk4FJ,CShmGE,6CACE,yBACA,UTkmGJ,CS/lGE,yEAII,0BT8lGN,CSrlGE,qEACE,+BTulGJ,CStkGE,2hBARM,0BTmlGR,CS/+FE,yCgCQA,6EhCNE,yBACA,UTi/FJ,CSh7FE,uFACE,oBTk7FJ,CS/6FE,8LAEE,oBTi7FJ,CS96FE,oNAEE,2DTg7FJ,CS76FE,oNAEE,4DT+6FJ,CS56FE,oPAEE,kBT86FJ,CS36FE,8OAEE,kBT66FJ,CS3oGE,gFACE,yBACA,eT6oGJ,CS1oGE,4GAII,0BTyoGN,CShoGE,wGACE,oCTkoGJ,CSjnGE,ooBARM,0BT8nGR,CSt9FE,qFACE,gBTw9FJ,CSr9FE,0LAEE,oBTu9FJ,CSp9FE,gNAEE,uDTs9FJ,CSn9FE,gNAEE,wDTq9FJ,CSl9FE,gPAEE,kBTo9FJ,CSj9FE,0OAEE,kBTm9FJ,CSjrGE,8EACE,qBACA,UTmrGJ,CShrGE,0GAII,sBT+qGN,CStqGE,sGACE,+BTwqGJ,CSvpGE,8nBARM,0BToqGR,CSljGE,+CgCNA,oFzC2jGF,CSjjGE,+CACE,aTmjGJ,CSjjGI,0DACE,aTmjGN,CShjGI,wDACE,STkjGN,CS9iGE,uDACE,eTgjGJ,CUxtGE,uC+BiJA,qF/B/IE,mBACA,UV0tGJ,C4CluGE,8BACE,0B5CouGJ,C4CjuGE,uCACE,4B5CmuGJ,CWjuGE,sCAEE,mBACA,UXkuGJ,CyC3kGE,oEAXA,2EzCylGF,CWluGE,iCACE,0BXouGJ,C6CpvGM,sVlCoBF,oBXmuGJ,CW9tGE,oBACE,qHAEE,kBX+tGJ,CACF,CW5tGE,mDACE,UX8tGJ,CW3tGE,yGAEE,eX6tGJ,CW1tGE,iEACE,eX4tGJ,CW1tGI,4MAEE,aX4tGN,CY1uGE,kEACE,eZ+uGJ,CY5uGE,mEACE,aZ8uGJ,CY5uGI,8EACE,aZ8uGN,CY3uGI,4EACE,SZ6uGN,CYzuGE,8DACE,aZ2uGJ,CYxuGE,wCACE,qBZ0uGJ,CYtuGI,oEACE,wBZwuGN,CYtuGM,+EACE,wBZwuGR,CYruGM,6EACE,oBZuuGR,CYjuGI,6HACE,aZmuGN,CYhuGI,wIACE,aZkuGN,CYntGM,2ZAEE,SZ2tGR,CYvtGI,yKAEE,oBZytGN,CYrtGE,4BACE,SZutGJ,Ca7yGI,sIACE,ebkzGN,Ca/yGI,6EACE,0BbizGN,Ca9yGI,qGiCxBF,0EACA,yBACA,0B9Cy0GF,C+Cn0GI,+EACE,0B/Cq0GN,C+Cl0GI,uGDZF,0EACA,yBACA,0B9Ci1GF,Ccp0GI,sEACE,0Bds0GN,Ccn0GI,8FACE,0Bdq0GN,Ccl0GI,kFACE,0Bdo0GN,Cch0GM,+FACE,edk0GR,Cc/zGM,0GACE,wBdi0GR,Ce70GI,4EACE,ef+0GN,Ce50GI,kFACE,Uf80GN,Ce10GM,8FACE,af40GR,Cez0GM,yGACE,af20GR,Cej0GM,uOACE,Sfs0GR,Cej0GM,kGACE,efm0GR,Ceh0GM,oGACE,efk0GR,CgDr3GI,uCACE,ahDu3GN,CgDp3GI,sCACE,ahDs3GN,CgDn3GI,oCACE,ShDq3GN,CkB13GE,oFACE,elB43GJ,CkBz3GE,yJAEE,elB23GJ,CkBx3GE,oCACE,mBlB03GJ,CiD34GE,iD/BoBI,elB03GN,CiD14GE,sD/BgBI,elB63GN,CiDz4GE,+D/BYI,elBg4GN,CiDx4GE,0D/BQI,elBm4GN,CkB13GM,2CACE,elB43GR,CkBz3GM,oDACE,elB23GR,CkBt3GE,+DACE,mBlBw3GJ,CkBr3GE,yHAEE,elBu3GJ,CkBp3GE,2GACE,SlBs3GJ,C2B/5GI,gGACE,U3Bo6GN,C2Bj6GI,+CACE,e3Bm6GN,C2B/5GE,yCACE,wB3Bi6GJ,C2B35GI,sSACE,oB3Bi6GN,C2B55GI,kKACE,oB3B85GN,CmB17GE,iCAEE,kBnB27GJ,CyCjyGE,+DAXA,4EzC+yGF,CmB37GE,gCACE,iBACA,UnB67GJ,CmB17GM,uJAGE,enB27GR,CmBt7GE,yGAEE,UnBw7GJ,CmBj7GI,2PACE,oBnBs7GN,CoBl9GE,gCACE,kBpBo9GJ,CoBj9GE,8FAEE,epBm9GJ,CoBh9GE,oFAEE,0BACA,2BpBk9GJ,CoB/8GE,2EAEE,yBpBi9GJ,CoB78GI,2QAIE,sBpB+8GN,CkD79GE,8CACE,YlD+9GJ,CkD59GE,0CACE,wBlD89GJ,CkD39GE,8CACE,wBlD69GJ,CkDz9GI,2EACE,YlD29GN,CkDx9GI,uEACE,wBlD09GN,CkDv9GI,2EACE,wBlDy9GN,CkDp9GI,yEACE,YlDs9GN,CkDn9GI,qEACE,wBlDq9GN,CkDl9GI,yEACE,oBlDo9GN,CmDrgHI,mFACE,cnDugHN,CmDpgHI,yGACE,cnDsgHN,CmDngHI,qGACE,UnDqgHN,CoD9/GE,yCACE,sBpDggHJ,CoDrhHE,yFACE,oBpDuhHJ,CoDphHE,+WAIE,wBpDohHJ,CoD5hHE,wFACE,oBpD8hHJ,CoD3hHE,2WAIE,wBpD2hHJ,CoDniHE,sFACE,gBpDqiHJ,CoDliHE,mWAIE,oBpDkiHJ,CoDjgHM,8KAEE,sBpDmgHR,CoDhgHM,0KAEE,0BpDkgHR,CoD//GM,+EACE,epDigHR,CoD3/GI,uDACE,qBpD6/GN,CqB9iHE,mCACE,UrBgjHJ,CqBziHE,iGACE,erB8iHJ,CqB3iHE,mCACE,erB6iHJ,CqB1iHE,mCACE,kBrB4iHJ,CyCr6GE,iEAXA,4EzCm7GF,CqB5iHI,sFACE,oBrB8iHN,CqBxiHM,2EACE,arB0iHR,CqBviHM,0EACE,arByiHR,CqBjiHI,0JACE,SrBsiHN,CqBniHI,mFACE,erBqiHN,CqD/kHE,uCACE,wBALmC,CAMnC,UrDilHJ,CqD9kHE,6BACE,wBAXwB,CAYxB,UrDglHJ,CqD9kHI,6CACE,wBrDglHN,CqD7kHI,mDZ6HF,mFzCm9GF,CqDzkHE,kCACE,gCrD2kHJ,CqDnkHE,6FACE,+BAhCmB,CAiCnB,iBrDykHJ,CqDvkHI,2DACE,iBACA,gCrDykHN,CqDrkHE,uDAQI,0BrDgkHN,CsDznHI,uEACE,wBtD2nHN,CsDxnHI,qEAGE,0BtDwnHN,CsDrnHI,mEAGE,wBtDqnHN,CsDloHI,mFACE,wBtDooHN,CsDjoHI,iFAGE,0BtDioHN,CsD9nHI,+EAGE,wBtD8nHN,CsD3oHI,gFACE,oBtD6oHN,CsD1oHI,8EAGE,0BtD0oHN,CsDvoHI,4EAGE,oBtDuoHN,CsDlmHI,yEAGE,qBtDkmHN,CsD9lHE,yCb2FA,4EazFE,wBtDgmHJ,CsD7lHE,uCACE,0BtD+lHJ,CsBrnHE,8CACE,0BtBunHJ,CsBnqHE,2JAGE,wBtBqqHJ,CsBlqHE,2DACE,UtBoqHJ,CsBjqHE,qDAGE,0BtBiqHJ,CsB9qHE,wJAGE,wBtBgrHJ,CsB7qHE,0DACE,etB+qHJ,CsB5qHE,oDAGE,0BtB4qHJ,CsBzrHE,kJAGE,oBtB2rHJ,CsBxrHE,wDACE,UtB0rHJ,CsBvrHE,kDAGE,sBtBurHJ,CsB1nHM,4XACE,0BtBqoHR,CsB/nHI,8DAGE,0BtB+nHN,CsBrnHM,sLAEE,qBtBunHR,CsBnnHQ,8MAEE,0BtBqnHV,CsB/mHM,8FACE,sBA9EiB,CA+EjB,wBtBinHR,CsBxmHQ,ocACE,sBtB6mHV,CsBvmHE,iEACE,sBtBymHJ,CsBhmHE,0DACE,wFAIA,+FtB+lHJ,CsBrlHE,wDACE,wFtBulHJ,CuBtuHI,qJAGE,0BvBsuHN,CuBhuHI,oBACE,wCACE,evBkuHN,CACF,CuB/tHI,uGAIE,evB+tHN,CuB5tHI,iDAGE,2BACA,UvB4tHN,CuBztHI,kLAGE,yBACA,UvB2tHN,CuBvtHM,4DACE,evBytHR,CuBttHM,mNAGE,yBACA,evBwtHR,CuBntHM,0DACE,UvBqtHR,CuBltHM,6MAGE,qBACA,UvBotHR,CuBhtHI,6DACE,yBACA,SvBktHN,CuB/sHI,wEACE,UvBitHN,CuB9sHI,uEACE,SvBgtHN,CuB5sHE,gFACE,wBvB8sHJ,CuB3sHE,mDACE,2BvB6sHJ,CuB1sHE,2JAGE,0BvB4sHJ,CuDzyHE,wCAYI,avDgyHN,CwBxyHE,mEAEE,iCxB0yHJ,CwBtyHI,iIAEE,8BAVY,CAWZ,kBxBwyHN,CwBpyHE,+DACE,UxBsyHJ,CwBpyHI,iGACE,exBsyHN,CwBlyHE,oDACE,iBxBoyHJ,CwBjyHE,wFACE,sBxBmyHJ,CwB/xHE,kIAEE,mBACA,exBiyHJ,CwBnvHM,wzBACE,0BxByvHR,CwBpwHE,oHACE,wBxBswHJ,CwBvwHE,oZACE,qBxBywHJ,CwBhwHM,gzBACE,0BxBswHR,CwBjxHE,kHACE,wBxBmxHJ,CwBpxHE,4YACE,0BxBsxHJ,CwB7wHM,gyBACE,0BxBmxHR,CwB9xHE,8GACE,oBxBgyHJ,CwBjyHE,4XACE,qBxBmyHJ,CwB1xHM,g5BACE,0BxBgyHR,CwBrxHE,sdACE,wBxBuxHJ,CwBnxHE,0WACE,UxBqxHJ,CwBnxHI,8aACE,WxBqxHN,CwBhxHE,k2BAIE,iBxBqxHJ,CwBlxHE,4hBAEE,kBxBqxHJ,CwBhxHE,8kBAGE,0BxBoxHJ,CwB/zHM,w4BACE,0BxBq0HR,CwB1zHE,gdACE,wBxB4zHJ,CwBxzHE,sWACE,exB0zHJ,CwBxzHI,0aACE,WxB0zHN,CwBrzHE,01BAIE,sBxB0zHJ,CwBvzHE,whBAEE,kBxB0zHJ,CwBrzHE,wkBAGE,0BxByzHJ,CwBp2HM,w3BACE,0BxB02HR,CwB/1HE,ocACE,oBxBi2HJ,CwB71HE,8VACE,UxB+1HJ,CwB71HI,kaACE,WxB+1HN,CwB11HE,00BAIE,iBxB+1HJ,CwB51HE,ghBAEE,kBxB+1HJ,CwB11HE,4jBAGE,0BxB81HJ,CyBp7HE,8BACE,mBACA,UzBs7HJ,CyBp7HI,0CApCF,mBACA,UzB29HF,CyBp7HI,yCAxCF,mBACA,ezB+9HF,CyBp7HI,uCA5CF,eACA,UzBm+HF,CyB/9HE,+KAGE,6BzBi+HJ,CyB99HE,iSAKE,azBg+HJ,CyB79HE,iDACE,wBzB+9HJ,C0Bn/HE,8BACE,oB1Bq/HJ,C+B5/HE,2BACE,kB/B8/HJ,C+B3/HE,uEAEE,U/B6/HJ,C8BngIE,0CAGE,gBACA,mBW6IF,6EzCu3HF,C8B//HE,6CACE,a9BigIJ,CqCvyHA,wDACE,iBACA,eACA,cACA,kBrC0yHF,CqCvyHA,mBACE,mBACA,gBrC0yHF,CqCpyHE,mCACE,kBrC2yHJ,CApiIA,SACI,aACA,sBACA,kBACA,MACA,SACA,OACA,OA4iIJ,CA1iIA,UAAa,WA8iIb,CA7iIA,KACI,SACA,6CACA,wBAgjIJ,CA7iIA,QACI,kBACA,SACA,WACA,YACA,kBAgjIJ,CA9iIA,WACI,gBACA,aACA,qBAijIJ,CA9iIA,sDACI,aACA,UAijIJ,CA7iIA,WACI,OACA,YAgjIJ,CA9iIA,UACI,eACA,gBAijIJ,CA9iIA,YACI,mBACA,aAijIJ,CA/iII,eACI,UAijIR,CA9iIA,SACI,eACA,kBAijIJ,CA/iIA,WACI,cAkjIJ,CA9iIA,mBACI,wBAijIJ,CA9iII,2BACI,aACA,mBACA,2BACA,kBACA,mBACA,WAijIR,CAhjIQ,8BACI,UqC9CA,CrC+CA,eACA,QAkjIZ,CwDpoIA,WACE,0BAA6B,CAC7B,iBAAkB,CAClB,eAAgB,CAChB,uDAAmC,CACnC,2QAKF,CAEA,gBACE,0BAA6B,CAC7B,eAAmB,CACnB,iBAAkB,CAClB,cAAe,CACf,oBAAqB,CACrB,aAAc,CACd,mBAAoB,CACpB,qBAAsB,CACtB,gBAAiB,CACjB,kBAAmB,CACnB,aAAc,CAGd,kCAAmC,CAEnC,iCAAkC,CAGlC,iCAAkC,CAGlC,4BACF","file":"styles.23c0f6921dfd2be3c47e.css","sourcesContent":["// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../../cdk/a11y';\n\n$font-size: 12px;\n$font-weight: 600;\n$default-size: 22px !default;\n$small-size: $default-size - 6;\n$large-size: $default-size + 6;\n\n// Mixin for building offset given different sizes\n@mixin _badge-size($size) {\n  // This mixin isn't used in the context of a theme so we can disable the ampersand check.\n  // stylelint-disable material/no-ampersand-beyond-selector-start\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: -$size / 2;\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: -$size / 2;\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: -$size / 2;\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: -$size / 2;\n      }\n    }\n  }\n  // stylelint-enable\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $primary: map.get($config, primary);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-badge-content {\n    color: theming.get-color-from-palette($primary, default-contrast);\n    background: theming.get-color-from-palette($primary);\n\n    @include a11y.high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: theming.get-color-from-palette($accent);\n      color: theming.get-color-from-palette($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: theming.get-color-from-palette($warn, default-contrast);\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-badge {\n    position: relative;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      $app-background: theming.get-color-from-palette($background, 'background');\n      $badge-color: theming.get-color-from-palette($foreground, disabled-button);\n\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. If it is a color *type*,\n      // we convert it into a solid color by taking the opacity from the rgba value and using\n      // the value to determine the percentage of the background to put into foreground when\n      // mixing the colors together.\n      @if (meta.type-of($badge-color) == color and meta.type-of($app-background) == color) {\n        $badge-opacity: opacity($badge-color);\n        background: color.mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      }\n      @else {\n        background: $badge-color;\n      }\n\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _badge-size($small-size);\n  }\n  .mat-badge-medium {\n    @include _badge-size($default-size);\n  }\n  .mat-badge-large {\n    @include _badge-size($large-size);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-badge-content {\n    font-weight: $font-weight;\n    font-size: $font-size;\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    // Set the font size to 75% of the original.\n    font-size: $font-size * 0.75;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $font-size * 2;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","/* You can add global styles to this file, and also import other style files */\n//@import './app.theme';\n\n//@use '~@angular/material' as mat;\n@import './theme.scss';\n\n\napp-root {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 0;\n    bottom:0;\n    left: 0;\n    right: 0;\n}\nhtml, body { height: 100%; }\nbody {\n    margin: 0;\n    font-family: Roboto, \"Helvetica Neue\", sans-serif;\n    background-color: $light-background;\n}\n\n#footer {\n    position: absolute;\n    bottom:0;\n    width:100%;\n    height:60px;\n    background: map-get($theme-primary, 'darker');\n}\n.container {\n    min-height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.app-footer, .app-nav, .app-aside, .app-header, .app-main{\n    padding:20px;\n    margin: 5px;\n}\n\n\n.over-main{\n    flex: 1;\n    display: flex;\n}\n.app-main {\n    flex: 1 1 300px;\n    min-height: 300px;\n}\n\n.app-footer{\n    background: map-get($theme-primary, 'main');\n    flex: 0 0 40px;\n\n    h4 {\n        color: $light-text;\n    }\n}\n.app-nav {\n    flex: 0 2 150px;\n    background: map-get($theme-primary, 'lighter');\n}\n.app-aside {\n    flex: 0 2 200px;\n    //background: map-get($theme-primary, 'lighter');\n}\n\n.hover-class:hover{\n    background-color: map-get($theme-primary, 'darker');\n}\nmat-list{\n    .header-container{\n        display: flex;\n        align-items: center;\n        justify-content: flex-start;\n        padding-left: 25px;\n        background: map-get($theme-primary, 'lighter');\n        height: 50px;\n        h2 {\n            color: $dark-text;\n            line-height: 0.1;\n            margin: 0px\n            }\n        }\n    }\n\n    \n","@use 'sass:map';\n@use 'typography-utils';\n@use '../theming/theming';\n\n/// Defines a typography level from the Material Design spec.\n/// @param {String} $font-size The font-size for this level.\n/// @param {String | Number} $line-height The line-height for this level.\n/// @param {String | Number} $font-weight The font-weight for this level.\n/// @param {String} $font-family The font-family for this level.\n/// @param {String} $letter-spacing The letter-spacing for this level.\n/// @returns {Map} A map representing the definition of this typpographic level.\n@function define-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: normal) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n/// Defines a collection of typography levels to configure typography for an application.\n/// Any level not specified defaults to the values defined in the Material Design specification:\n/// https://material.io/guidelines/style/typography.html.\n///\n/// Note that the Material Design specification does not describe explicit letter-spacing values.\n/// The values here come from reverse engineering the Material Design examples.\n/// @param {String} $font-family Default font-family for levels that don't specify font-family.\n/// @param {Map} $display-4 Configuration for the \"display-4\" typographic level.\n/// @param {Map} $display-3 Configuration for the \"display-3\" typographic level.\n/// @param {Map} $display-2 Configuration for the \"display-2\" typographic level.\n/// @param {Map} $display-1 Configuration for the \"display-1\" typographic level.\n/// @param {Map} $headline Configuration for the \"headline\" typographic level.\n/// @param {Map} $title Configuration for the \"title\" typographic level.\n/// @param {Map} $subheading-2 Configuration for the \"subheading-2\" typographic level.\n/// @param {Map} $subheading-1 Configuration for the \"subheading-1\" typographic level.\n/// @param {Map} $body-2 Configuration for the \"body-2\" typographic level.\n/// @param {Map} $body-1 Configuration for the \"body-1\" typographic level.\n/// @param {Map} $caption Configuration for the \"caption\" typographic level.\n/// @param {Map} $button Configuration for the \"button\" typographic level.\n/// @param {Map} $input Configuration for the \"input\" typographic level.\n/// @returns {Map} A typography config for the application.\n@function define-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $display-3:     define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $display-2:     define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $display-1:     define-typography-level(34px, 40px, 400),\n  $headline:      define-typography-level(24px, 32px, 400),\n  $title:         define-typography-level(20px, 32px, 500),\n  $subheading-2:  define-typography-level(16px, 28px, 400),\n  $subheading-1:  define-typography-level(15px, 24px, 400),\n  $body-2:        define-typography-level(14px, 24px, 500),\n  $body-1:        define-typography-level(14px, 20px, 400),\n  $caption:       define-typography-level(12px, 20px, 400),\n  $button:        define-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         define-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map.get($level, font-family) == null {\n      $new-level: map.merge($level, (font-family: $font-family));\n      $config: map.merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map.merge($config, (font-family: $font-family));\n}\n\n// Whether a config is for the Material Design 2018 typography system.\n@function private-typography-is-2018-config($config) {\n  @return map.get($config, headline-1) != null;\n}\n\n// Whether a config is for the Material Design 2014 typography system.\n@function private-typography-is-2014-config($config) {\n  @return map.get($config, headline) != null;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2014 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n//\n// Components using this function should be migrated to normalize to the 2018 style config instead.\n// New components should not use this function.\n@function private-typography-to-2014-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2014-config($config) {\n    $args: (\n        display-4: map.get($config, headline-1),\n        display-3: map.get($config, headline-2),\n        display-2: map.get($config, headline-3),\n        display-1: map.get($config, headline-4),\n        headline: map.get($config, headline-5),\n        title: map.get($config, headline-6),\n        subheading-2: map.get($config, subtitle-1),\n        subheading-1: map.get($config, subtitle-2),\n        body-2: map.get($config, body-1),\n        body-1: map.get($config, body-2),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n    );\n    $non-null-args: ();\n    @each $key, $value in $args {\n      @if $value != null {\n        $non-null-args: map.merge($non-null-args, ($key: $value));\n      }\n    }\n    @return define-typography-config($non-null-args...);\n  }\n  @return $config;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2018 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function private-typography-to-2018-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2018-config($config) {\n    @return (\n        headline-1: map.get($config, display-4),\n        headline-2: map.get($config, display-3),\n        headline-3: map.get($config, display-2),\n        headline-4: map.get($config, display-1),\n        headline-5: map.get($config, headline),\n        headline-6: map.get($config, title),\n        subtitle-1: map.get($config, subheading-2),\n        subtitle-2: map.get($config, subheading-1),\n        body-1: map.get($config, body-2),\n        body-2: map.get($config, body-1),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n        overline: if(map.get($config, overline), map.get($config, overline),\n            define-typography-level(12px, 32px, 500)\n        )\n    );\n  }\n  @return $config;\n}\n\n// stylelint-disable material/theme-mixin-api\n\n/// Emits baseline typographic styles based on a given config.\n/// @param {Map} $config-or-theme A typography config for an entire theme.\n/// @param {String} $selector Ancestor selector under which native elements, such as h1, will\n///     be styled.\n@mixin typography-hierarchy($config-or-theme, $selector: '.mat-typography') {\n  $config: private-typography-to-2014-config(theming.get-typography-config($config-or-theme));\n\n  .mat-h1, .mat-headline, #{$selector} h1 {\n    @include typography-utils.typography-level($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2, .mat-title, #{$selector} h2 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3, .mat-subheading-2, #{$selector} h3 {\n    @include typography-utils.typography-level($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4, .mat-subheading-1, #{$selector} h4 {\n    @include typography-utils.typography-level($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5, #{$selector} h5 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.83),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6, #{$selector} h6 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.67),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong, .mat-body-2 {\n    @include typography-utils.typography-level($config, body-2);\n  }\n\n  .mat-body, .mat-body-1, #{$selector} {\n    @include typography-utils.typography-level($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small, .mat-caption {\n    @include typography-utils.typography-level($config, caption);\n  }\n\n  .mat-display-4, #{$selector} .mat-display-4 {\n    @include typography-utils.typography-level($config, display-4);\n    margin: 0 0 56px;\n  }\n\n  .mat-display-3, #{$selector} .mat-display-3 {\n    @include typography-utils.typography-level($config, display-3);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-2, #{$selector} .mat-display-2 {\n    @include typography-utils.typography-level($config, display-2);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-1, #{$selector} .mat-display-1 {\n    @include typography-utils.typography-level($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n\n// stylelint-enable material/theme-mixin-api\n","@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:string';\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map.get(map.get($config, $level), $name);\n}\n\n/// Gets the font size for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n/// Gets the line height for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n/// Gets the font weight for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n/// Gets the letter spacing for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n/// Gets the font-family from a typography config and removes the quotes around it.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-family($config, $level: null) {\n  $font-family: map.get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(meta.type-of($font-family) == string, string.unquote($font-family), $font-family);\n}\n\n/// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n/// the individual properties if a value that isn't allowed in the shorthand is passed in.\n/// @param {String} $font-size The font-size value.\n/// @param {String | Number} $font-weight The font-weight value.\n/// @param {String | Number} $line-height The line-height value.\n/// @param {String} $font-family The font-family value.\n/// @returns {String} The `font` shorthand value combining the given parts.\n@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note\n    // that we need to use interpolation for `font-size/line-height` in order to prevent\n    // Sass from dividing the two values.\n    font: $font-weight #{$font-size}/#{$line-height} $font-family;\n  }\n}\n\n/// Emits CSS styles for the given typography level.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@mixin typography-level($config, $level) {\n  $font-size: font-size($config, $level);\n  $font-weight: font-weight($config, $level);\n  $line-height: line-height($config, $level);\n  $font-family: font-family($config, $level);\n\n  @include font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: letter-spacing($config, $level);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-bottom-sheet-container {\n    @include private.private-theme-elevation(16, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-bottom-sheet-container {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-bottom-sheet') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$_ripple-opacity: 0.1;\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _focus-overlay-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($warn);\n  }\n\n  &.mat-button-disabled .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n// Applies the background color for a ripple. If the value provided is not a Sass color,\n// we assume that we've been given a CSS variable. Since we can't perform alpha-blending\n// on a CSS variable, we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $hue, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $hue, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _ripple-color($theme, $hue, $opacity: $_ripple-opacity) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    @include _ripple-background($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    @include _ripple-background($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    @include _ripple-background($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _theme-property($theme, $property, $hue) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: theming.get-color-from-palette($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: theming.get-color-from-palette($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: theming.get-color-from-palette($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &.mat-button-disabled {\n    &.mat-button-disabled {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: theming.get-color-from-palette($palette, disabled-button);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _theme-property($config, 'color', text);\n    @include _focus-overlay-color($config);\n\n    // Setup the ripple color to be based on the text color. This ensures that the ripples\n    // are matching with the current theme palette and are in contrast to the background color\n    // (e.g in themed toolbars).\n    .mat-ripple-element {\n      opacity: $_ripple-opacity;\n      background-color: currentColor;\n    }\n  }\n\n  .mat-button-focus-overlay {\n    background: map.get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not(.mat-button-disabled) {\n    border-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: theming.get-color-from-palette($foreground, text);\n    background-color: theming.get-color-from-palette($background, raised-button);\n\n    @include _theme-property($config, 'color', default-contrast);\n    @include _theme-property($config, 'background-color', default);\n    @include _ripple-color($config, default-contrast);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include private.private-theme-overridable-elevation(0, $config);\n  }\n\n  .mat-raised-button {\n    @include private.private-theme-overridable-elevation(2, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(8, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include private.private-theme-overridable-elevation(6, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(12, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-card {\n    @include private.private-theme-overridable-elevation(1, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-card {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: typography-utils.font-size($config, headline);\n      weight: typography-utils.font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: typography-utils.font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: theming.get-color-from-palette($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked,\n    &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n  }\n\n  // Switch this to a solid color since we're using `opacity`\n  // to control how opaque the ripple should be.\n  .mat-checkbox .mat-ripple-element {\n    background-color: map.get(map.get($config, foreground), base);\n  }\n\n  .mat-checkbox-checked:not(.mat-checkbox-disabled),\n  .mat-checkbox:active:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-ripple-element {\n      background: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-ripple-element {\n      background: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-ripple-element {\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-checkbox {\n    font-family: typography-utils.font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: typography-utils.line-height($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$chip-remove-font-size: 18px;\n\n@mixin _element-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n}\n\n\n// Applies the background color for a ripple element.\n// If the color value provided is not a Sass color,\n// we assume that we've been given a CSS variable.\n// Since we can't perform alpha-blending on a CSS variable,\n// we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $default-contrast, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $default-contrast, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  @include _element-color(theming.get-color-from-palette($palette, default-contrast),\n    theming.get-color-from-palette($palette));\n\n  .mat-ripple-element {\n    @include _ripple-background($palette, default-contrast, 0.1);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $unselected-background: theming.get-color-from-palette($background, unselected-chip);\n  $unselected-foreground: theming.get-color-from-palette($foreground, text);\n\n  .mat-chip.mat-standard-chip {\n    @include _element-color($unselected-foreground, $unselected-background);\n\n    &:not(.mat-chip-disabled) {\n      &:active {\n        @include private.private-theme-elevation(3, $config);\n      }\n\n      .mat-chip-remove:hover {\n        opacity: 0.54;\n      }\n    }\n\n    &.mat-chip-disabled {\n      opacity: 0.4;\n    }\n\n    &::after {\n      background: map.get($foreground, base);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-chip {\n    font-size: typography-utils.font-size($config, body-2);\n    font-weight: typography-utils.font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $chip-remove-font-size;\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-table {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-table {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: typography-utils.font-size($config, caption);\n    font-weight: typography-utils.font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _color($palette) {\n  @include date-range-colors(\n    theming.get-color-from-palette($palette, default, $range-fade-amount));\n\n  .mat-calendar-body-selected {\n    background-color: theming.get-color-from-palette($palette);\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    $background: theming.get-color-from-palette($palette);\n\n    @if (meta.type-of($background) == color) {\n      background-color: color.adjust($background, $alpha: -$selected-fade-amount);\n    }\n    @else {\n      // If we couldn't resolve to background to a color (e.g. it's a CSS variable),\n      // fall back to fading the content out via `opacity`.\n      opacity: $today-fade-amount;\n    }\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $selected-today-box-shadow-width\n                theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover,\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    & > .mat-calendar-body-cell-content {\n      @include _unselected-cell {\n        background-color: theming.get-color-from-palette($palette, 0.3);\n      }\n    }\n  }\n}\n\n// Utility mixin to target cells that aren't selected. Used to make selector easier to follow.\n@mixin _unselected-cell {\n  &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n    @content;\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-calendar-arrow {\n    border-top-color: theming.get-color-from-palette($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: theming.get-color-from-palette($foreground, icon);\n  }\n\n  .mat-calendar-table-header {\n    color: theming.get-color-from-palette($foreground, hint-text);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-calendar-body-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content,\n  .mat-date-range-input-separator {\n    color: theming.get-color-from-palette($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-form-field-disabled .mat-date-range-input-separator {\n    color: $disabled-color;\n  }\n\n  .mat-calendar-body-in-preview {\n    $divider-color: theming.get-color-from-palette($foreground, divider);\n\n    @if meta.type-of($divider-color) == color {\n      // The divider color is set under the assumption that it'll be used\n      // for a solid border, but because we're using a dashed border for the\n      // preview range, we need to bump its opacity to ensure that it's visible.\n      color: rgba($divider-color, math.min(opacity($divider-color) * 2, 1));\n    }\n    @else {\n      color: $divider-color;\n    }\n  }\n\n  .mat-calendar-body-today {\n    @include _unselected-cell {\n      // Note: though it's not text, the border is a hint about the fact that this is today's date,\n      // so we use the hint color.\n      border-color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today {\n    @include _unselected-cell {\n      $color: theming.get-color-from-palette($foreground, hint-text);\n\n      @if (meta.type-of($color) == color) {\n        border-color: color.adjust($color, $alpha: -$today-fade-amount);\n      }\n      @else {\n        // If the color didn't resolve to a color value, but something like a CSS variable, we can't\n        // fade it out so we fall back to reducing the element opacity. Note that we don't use the\n        // $mat-datepicker-today-fade-amount, because hint text usually has some opacity applied\n        // to it already and we don't want them to stack on top of each other.\n        opacity: 0.5;\n      }\n    }\n  }\n\n  @include _color(map.get($config, primary));\n\n  .mat-datepicker-content {\n    @include private.private-theme-elevation(4, $config);\n    background-color: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-accent {\n      @include _color(map.get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _color(map.get($config, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include private.private-theme-elevation(24, $config);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: theming.get-color-from-palette(map.get($config, primary), text);\n\n    &.mat-accent {\n      color: theming.get-color-from-palette(map.get($config, accent), text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette(map.get($config, warn), text);\n    }\n  }\n\n  .mat-date-range-input-inner[disabled] {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-calendar {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $calendar-weekday-table-font-size;\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: rgba(#f9ab00, $range-fade-amount),\n  $overlap-color: #a8dab5,\n  $overlap-selected-color: color.adjust($overlap-color, $lightness: -30%)) {\n\n  .mat-calendar-body-in-range::before {\n    background: $range-color;\n  }\n\n  .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range::before {\n    background: $comparison-color;\n  }\n\n  .mat-calendar-body-comparison-bridge-start::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-end::before {\n    background: linear-gradient(to right, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-comparison-bridge-end::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-start::before {\n    background: linear-gradient(to left, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-in-range > .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after {\n    background: $overlap-color;\n  }\n\n  .mat-calendar-body-comparison-identical.mat-calendar-body-selected,\n  .mat-calendar-body-in-comparison-range > .mat-calendar-body-selected {\n    background: $overlap-selected-color;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-dialog-container {\n    @include private.private-theme-elevation(24, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-dialog-title {\n    @include typography-utils.typography-level($config, title);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './expansion-variables';\n@use './expansion-mixins';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-expansion-panel {\n    @include private.private-theme-overridable-elevation(2, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  @include expansion-mixins.private-expansion-focus {\n    background: theming.get-color-from-palette($background, hover);\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: theming.get-color-from-palette($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-expansion-panel-header {\n    font: {\n      family: typography-utils.font-family($config, subheading-1);\n      size: typography-utils.font-size($config, subheading-1);\n      weight: typography-utils.font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $expanded-height: compatibility.private-density-prop-value(\n        expansion-variables.$header-density-config, $density-scale, expanded-height);\n  $collapsed-height: compatibility.private-density-prop-value(\n      expansion-variables.$header-density-config, $density-scale, collapsed-height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-expansion-panel-header {\n      height: $collapsed-height;\n\n      &.mat-expanded {\n        height: $expanded-height;\n      }\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-expansion') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@use './form-field-fill-theme.scss';\n@use './form-field-legacy-theme.scss';\n@use './form-field-outline-theme.scss';\n@use './form-field-standard-theme.scss';\n\n// Color styles that apply to all appearances of the form-field.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color:\n    theming.get-color-from-palette($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: theming.get-color-from-palette($primary, text);\n  $required-label-color: theming.get-color-from-palette($accent, text);\n\n  // Underline colors.\n  $underline-color-base:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: theming.get-color-from-palette($accent, text);\n  $underline-color-warn: theming.get-color-from-palette($warn, text);\n  $underline-focused-color: theming.get-color-from-palette($primary, text);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  .mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) {\n    .mat-form-field-infix::after {\n      color: $underline-focused-color;\n    }\n\n    &.mat-accent .mat-form-field-infix::after {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn .mat-form-field-infix::after {\n      color: $underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include form-field-legacy-theme.legacy-color($config);\n  @include form-field-standard-theme.standard-color($config);\n  @include form-field-fill-theme.fill-color($config);\n  @include form-field-outline-theme.outline-color($config);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $dedupe;\n\n  $dedupe: $dedupe + 0.00001 !global;\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include typography-utils.typography-level($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: $line-height * 1em;\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n  }\n\n  @include form-field-legacy-theme.legacy-typography($config);\n  @include form-field-standard-theme.standard-typography($config);\n  @include form-field-fill-theme.fill-typography($config);\n  @include form-field-outline-theme.outline-typography($config);\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  @include form-field-legacy-theme.private-form-field-legacy-density($density-scale);\n  @include form-field-standard-theme.private-form-field-standard-density($density-scale);\n  @include form-field-fill-theme.private-form-field-fill-density($density-scale);\n  @include form-field-outline-theme.private-form-field-outline-density($density-scale);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin legacy-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-color: theming.get-color-from-palette($foreground, secondary-text);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $legacy-dedupe);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  -ms-transform: translateY(-$infix-margin-top - $infix-padding + $legacy-dedupe)\n                  scale($font-scale);\n\n  width: 100% / $font-scale + $legacy-dedupe;\n\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n@mixin legacy-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: 0.5em / $subscript-font-scale - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n@mixin private-form-field-legacy-density($config-or-theme) {}\n\n@mixin legacy-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-legacy') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include legacy-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-legacy-density($density);\n    }\n    @if $typography != null {\n      @include legacy-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin fill-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $fill-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $fill-dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $fill-dedupe;\n\n  $fill-dedupe: $fill-dedupe + 0.00001 !global;\n}\n\n@mixin fill-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-fill-density($config-or-theme) {}\n\n@mixin fill-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-fill') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include fill-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-fill-density($density);\n    }\n    @if $typography != null {\n      @include fill-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin outline-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n  $outline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: theming.get-color-from-palette($primary);\n  $outline-color-accent: theming.get-color-from-palette($accent);\n  $outline-color-warn: theming.get-color-from-palette($warn);\n  $outline-color-disabled:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $outline-dedupe)\n  scale($font-scale);\n  width: 100% / $font-scale + $outline-dedupe;\n\n  $outline-dedupe: $outline-dedupe + 0.00001 !global;\n}\n\n@mixin outline-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-outline-density($config-or-theme) {}\n\n@mixin outline-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-outline') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include outline-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-outline-density($density);\n    }\n    @if $typography != null {\n      @include outline-typography($typography);\n    }\n  }\n}\n\n","@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin color($config-or-theme) {}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include list-common.base(typography-utils.font-size($config, caption));\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-grid-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin base($secondary-font-size) {\n  .mat-line {\n    @include truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin wrapper-base() {\n  @include normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/vendor-prefixes';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: theming.get-color-from-palette($primary, text);\n\n    @include vendor-prefixes.input-placeholder {\n      color: form-common.private-control-placeholder-color($config);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map.get($config, is-dark)) {\n      option {\n        color: palette.$dark-primary-text;\n      }\n\n      option:disabled {\n        color: palette.$dark-disabled-text;\n      }\n    }\n  }\n\n  .mat-form-field.mat-accent .mat-input-element {\n    caret-color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-form-field.mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: theming.get-color-from-palette($warn, text);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: -$line-spacing * 1em;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-input') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-menu-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: theming.get-color-from-palette($foreground, 'text');\n\n    &[disabled] {\n      &,\n      &::after,\n      .mat-icon-no-color {\n        color: theming.get-color-from-palette($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon-no-color,\n  .mat-menu-item-submenu-trigger::after {\n    color: theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-menu-item {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-menu') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './paginator-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-paginator {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n    border-right: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: theming.get-color-from-palette($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: typography-utils.font-family($config, caption);\n      size: typography-utils.font-size($config, caption);\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(paginator-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-paginator-container {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-paginator') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-select-value {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: form-common.private-control-placeholder-color($config);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: theming.get-color-from-palette($background, card);\n    @include private.private-theme-overridable-elevation(4, $config);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: theming.get-color-from-palette($primary, text);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: theming.get-color-from-palette($accent, text);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: theming.get-color-from-palette($warn, text);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  .mat-select {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: $line-height * 1em;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-slider-focus-ring {\n    $opacity: 0.2;\n    $color: theming.get-color-from-palette($palette, default, $opacity);\n    background-color: $color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($color) != color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $mat-slider-off-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-off-focused-color: theming.get-color-from-palette($foreground, slider-off-active);\n  $mat-slider-disabled-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color:\n    theming.get-color-from-palette($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color:\n    theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-tick-opacity: 0.7;\n  $mat-slider-tick-color:\n    theming.get-color-from-palette($foreground, base, $mat-slider-tick-opacity);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-primary {\n    @include _inner-content-theme($primary);\n  }\n\n  .mat-accent {\n    @include _inner-content-theme($accent);\n  }\n\n  .mat-warn {\n    @include _inner-content-theme($warn);\n  }\n\n  .mat-slider:hover,\n  .cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider-min-value {\n    .mat-slider-focus-ring {\n      $opacity: 0.12;\n      $color: theming.get-color-from-palette($foreground, base, $opacity);\n      background-color: $color;\n\n      // `mat-color` uses `rgba` for the opacity which won't work with\n      // CSS variables so we need to use `opacity` as a fallback.\n      @if (meta.type-of($color) != color) {\n        opacity: $opacity;\n      }\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slider-thumb-label-text {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, caption);\n      weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './stepper-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover {\n      background-color: theming.get-color-from-palette($background, hover);\n    }\n\n    // On touch devices the :hover state will linger on the element after a tap.\n    // Reset it via `@media` after the declaration, because the media query isn't\n    // supported by all browsers yet.\n    @media (hover: none) {\n      &:hover {\n        background: none;\n      }\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-step-icon {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      background-color: theming.get-color-from-palette($foreground, secondary-text);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: theming.get-color-from-palette($primary);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($accent);\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n    }\n\n    &.mat-warn {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($warn);\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: theming.get-color-from-palette($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-horizontal-stepper-header::before,\n  .mat-horizontal-stepper-header::after,\n  .mat-stepper-horizontal-line {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: typography-utils.font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: typography-utils.font-size($config, body-2);\n      weight: typography-utils.font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(stepper-variables.$density-config,\n    $density-scale, height);\n  $vertical-padding: ($height - stepper-variables.$label-header-height) / 2;\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-horizontal-stepper-header {\n      height: $height;\n    }\n\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,\n    .mat-vertical-stepper-header {\n      padding: $vertical-padding stepper-variables.$side-gap;\n    }\n\n    // Ensures that the vertical lines for the step content exceed into the step\n    // headers with a given distance (`$mat-stepper-line-gap`) to the step icon.\n    .mat-stepper-vertical-line::before {\n      top: stepper-variables.$line-gap - $vertical-padding;\n      bottom: stepper-variables.$line-gap - $vertical-padding;\n    }\n\n    // Ensures that the horizontal lines for the step header are centered vertically.\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header {\n      &::after, &::before {\n        top: $vertical-padding + stepper-variables.$label-header-height / 2;\n      }\n    }\n\n    // Ensures that the horizontal line for the step content is aligned centered vertically.\n    .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\n      top: $vertical-padding + stepper-variables.$label-header-height / 2;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $header-border: 1px solid theming.get-color-from-palette($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _label-focus-color($color);\n        @include _ink-bar-color($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          > .mat-tab-header, > .mat-tab-link-container {\n            @include _ink-bar-color($color, default-contrast);\n          }\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _label-focus-color($color);\n        @include _tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _ink-bar-color($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: theming.get-color-from-palette($color, $hue);\n  }\n}\n\n@mixin _label-focus-color($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: theming.get-color-from-palette($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _tabs-background($background-color) {\n  // Note that these selectors target direct descendants so\n  // that the styles don't apply to any nested tab groups.\n\n  // Set background color for the tab group\n  > .mat-tab-header, > .mat-tab-link-container, > .mat-tab-header-pagination {\n    background-color: theming.get-color-from-palette($background-color);\n  }\n\n  // Set labels to contrast against background\n  > .mat-tab-header .mat-tab-label, > .mat-tab-link-container .mat-tab-link {\n    color: theming.get-color-from-palette($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  > .mat-tab-header .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination .mat-tab-header-pagination-chevron,\n  > .mat-tab-link-container .mat-focus-indicator::before,\n  > .mat-tab-header .mat-focus-indicator::before {\n    border-color: theming.get-color-from-palette($background-color, default-contrast);\n  }\n\n  > .mat-tab-header .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($background-color, default-contrast, 0.4);\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  > .mat-tab-header .mat-ripple-element,\n  > .mat-tab-link-container .mat-ripple-element,\n  > .mat-tab-header-pagination .mat-ripple-element {\n    background-color: theming.get-color-from-palette($background-color, default-contrast, 0.12);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tab-group {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/style/variables';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './toolbar-variables';\n\n@mixin _height($height) {\n  .mat-toolbar-multiple-rows {\n    min-height: $height;\n  }\n  .mat-toolbar-row, .mat-toolbar-single-row {\n    height: $height;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  background: theming.get-color-from-palette($palette);\n  color: theming.get-color-from-palette($palette, default-contrast);\n}\n\n@mixin _form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-toolbar {\n    background: theming.get-color-from-palette($background, app-bar);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    @include _form-field-overrides;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0;\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height-desktop: compatibility.private-density-prop-value(\n      toolbar-variables.$desktop-density-config, $density-scale, height);\n  $height-mobile: compatibility.private-density-prop-value(\n      toolbar-variables.$mobile-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    // Set the default height for the toolbar.\n    @include _height($height-desktop);\n\n    // As per specs, toolbars should have a different height in mobile devices. This has been\n    // specified in the old guidelines and is still observable in the new specifications by\n    // looking at the spec images. See: https://material.io/design/components/app-bars-top.html#anatomy\n    @media (variables.$xsmall) {\n      @include _height($height-mobile);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$target-height: 22px;\n$font-size: 10px;\n$vertical-padding: ($target-height - $font-size) / 2;\n\n$handset-target-height: 30px;\n$handset-font-size: 14px;\n$handset-vertical-padding:\n    ($handset-target-height - $handset-font-size) / 2;\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n\n  .mat-tooltip {\n    background: theming.get-color-from-palette($background, tooltip, 0.9);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tooltip {\n    font-family: typography-utils.font-family($config);\n    font-size: $font-size;\n    padding-top: $vertical-padding;\n    padding-bottom: $vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $handset-font-size;\n    padding-top: $handset-vertical-padding;\n    padding-bottom: $handset-vertical-padding;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-list-base {\n    .mat-list-item {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-list-option {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-subheader {\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n  }\n\n  .mat-list-item-disabled {\n    background-color: theming.get-color-from-palette($background, disabled-list-option);\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item,\n  .mat-action-list .mat-list-item {\n    &:hover, &:focus {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n\n  .mat-list-single-selected-option {\n    &, &:hover, &:focus {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  $font-family: typography-utils.font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list-base {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: typography-utils.font-family($config, body-2);\n      font-size: typography-utils.font-size($config, body-2);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list-base[dense] {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: typography-utils.font-size($config, caption);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-option {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    &.mat-active {\n      background: theming.get-color-from-palette($background, hover);\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($primary, text);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-option {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, subheading-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, hint-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-optgroup-label {\n    @include typography-utils.typography-level($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-optgroup') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n@use '../core/theming/palette';\n@use '../core/style/private';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $accent: map.get($config, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, palette.$dark-primary-text, palette.$light-secondary-text);\n    background: if($is-dark-theme, map.get(palette.$grey-palette, 50), #323232);\n\n    @include private.private-theme-elevation(6, $config);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, theming.get-color-from-palette($accent, text));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-simple-snackbar {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './tree-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-tree {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tree {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: typography-utils.font-weight($config, body-1);\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(tree-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use '../../../cdk/a11y';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n    transform: scale(0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include a11y.high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n","/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assitive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &, &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n    }\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n","// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n","@use '../../cdk/overlay';\n@use '../../cdk/a11y';\n@use '../../cdk/text-field';\n\n// Core styles that can be used to apply material design treatments to any element.\n@use './ripple/ripple';\n@use './focus-indicators/focus-indicators';\n@use './typography/all-typography';\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin core($typography-config: null) {\n  @include all-typography.all-component-typographies($typography-config);\n  @include ripple.ripple();\n  @include a11y.a11y-visually-hidden();\n  @include overlay.overlay();\n  @include text-field.text-field-autosize();\n  @include text-field.text-field-autofill();\n\n  @include focus-indicators.private-strong-focus-indicators-positioning();\n  @include _mdc-core();\n}\n\n// Mixin that renders all of the core MDC styles. Private mixin included with `mat-core`.\n@mixin _mdc-core() {\n  @include _mdc-strong-focus-indicators-positioning();\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `_mat-mdc-core`.\n@mixin _mdc-strong-focus-indicators-positioning() {\n  .mat-mdc-focus-indicator {\n    position: relative;\n  }\n}\n","/**\n* Generated theme by Material Theme Generator\n* https://materialtheme.arcsine.dev\n* Fork at: https://materialtheme.arcsine.dev/?c=YHBhbGV0dGU$YHByaW1hcnk$YF48IzM4MGI0ZiIsIj9lcjwjYzNiNmNhIiwiO2VyPCMyNDA2MzZ$LCIlPmBePCM5NWQ2YzciLCI~ZXI8I2RmZjNlZSIsIjtlcjwjNzhjNmIzfiwid2Fybj5gXjwjZmYwMDAwIiwiP2VyPCNmZmIzYjMiLCI7ZXI8I2ZmMDAwMH4sIj9UZXh0PCMwMDAwMDAiLCI~PTwjZmFmYWZhIiwiO1RleHQ8I2ZmZmZmZiIsIjs9PCMyYzJjMmN$LCJmb250cz5bYEA8KC00fixgQDwoLTN$LGBAPCgtMn4sYEA8KC0xfixgQDxoZWFkbGluZX4sYEA8dGl0bGV$LGBAPHN1YiktMn4sYEA8c3ViKS0xfixgQDxib2R5LTJ$LGBAPGJvZHktMX4sYEA8YnV0dG9ufixgQDxjYXB0aW9ufixgQDxpbnB1dCIsInNpemU$bnVsbH1dLCJpY29uczxGaWxsZWQiLCI~bmVzcz50cnVlLCJ2ZXJzaW9uPjEyfQ==\n*/\n\n@use '~@angular/material' as mat;\n\n// Include the common styles for Angular Material. We include this here so that you only\n// have to load a single css file for Angular Material in your app.\n\n// Fonts\n@import 'https://fonts.googleapis.com/css?family=Material+Icons';\n@import url('https://fonts.googleapis.com/css?family=Roboto:300,400,500');\n     \n$fontConfig: (\n  display-4: mat.define-typography-level(112px, 112px, 300, 'Roboto', -0.0134em),\n  display-3: mat.define-typography-level(56px, 56px, 400, 'Roboto', -0.0089em),\n  display-2: mat.define-typography-level(45px, 48px, 400, 'Roboto', 0.0000em),\n  display-1: mat.define-typography-level(34px, 40px, 400, 'Roboto', 0.0074em),\n  headline: mat.define-typography-level(24px, 32px, 400, 'Roboto', 0.0000em),\n  title: mat.define-typography-level(20px, 32px, 500, 'Roboto', 0.0075em),\n  subheading-2: mat.define-typography-level(16px, 28px, 400, 'Roboto', 0.0094em),\n  subheading-1: mat.define-typography-level(15px, 24px, 500, 'Roboto', 0.0067em),\n  body-2: mat.define-typography-level(14px, 24px, 500, 'Roboto', 0.0179em),\n  body-1: mat.define-typography-level(14px, 20px, 400, 'Roboto', 0.0179em),\n  button: mat.define-typography-level(14px, 14px, 500, 'Roboto', 0.0893em),\n  caption: mat.define-typography-level(12px, 20px, 400, 'Roboto', 0.0333em),\n  input: mat.define-typography-level(inherit, 1.125, 400, 'Roboto', 1.5px)\n);\n\n// Foreground Elements\n\n// Light Theme Text\n$dark-text: #000000;\n$dark-primary-text: rgba($dark-text, 0.87);\n$dark-accent-text: rgba($dark-primary-text, 0.54);\n$dark-disabled-text: rgba($dark-primary-text, 0.38);\n$dark-dividers: rgba($dark-primary-text, 0.12);\n$dark-focused: rgba($dark-primary-text, 0.12);\n\n$mat-light-theme-foreground: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba($dark-text, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  secondary-text:    $dark-accent-text,\n  hint-text:         $dark-disabled-text,\n  accent-text:       $dark-accent-text,\n  icon:              $dark-accent-text,\n  icons:             $dark-accent-text,\n  text:              $dark-primary-text,\n  slider-min:        $dark-primary-text,\n  slider-off:        rgba($dark-text, 0.26),\n  slider-off-active: $dark-disabled-text,\n);\n\n// Dark Theme text\n$light-text: #ffffff;\n$light-primary-text: $light-text;\n$light-accent-text: rgba($light-primary-text, 0.7);\n$light-disabled-text: rgba($light-primary-text, 0.5);\n$light-dividers: rgba($light-primary-text, 0.12);\n$light-focused: rgba($light-primary-text, 0.12);\n\n$mat-dark-theme-foreground: (\n  base:              $light-text,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba($light-text, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-accent-text,\n  accent-text:       $light-accent-text,\n  icon:              $light-text,\n  icons:             $light-text,\n  text:              $light-text,\n  slider-min:        $light-text,\n  slider-off:        rgba($light-text, 0.3),\n  slider-off-active: rgba($light-text, 0.3),\n);\n\n// Background config\n// Light bg\n$light-background:    #fafafa;\n$light-bg-darker-5:   darken($light-background, 5%);\n$light-bg-darker-10:  darken($light-background, 10%);\n$light-bg-darker-20:  darken($light-background, 20%);\n$light-bg-darker-30:  darken($light-background, 30%);\n$light-bg-lighter-5:  lighten($light-background, 5%);\n$dark-bg-tooltip:     lighten(#2c2c2c, 20%);\n$dark-bg-alpha-4:     rgba(#2c2c2c, 0.04);\n$dark-bg-alpha-12:    rgba(#2c2c2c, 0.12);\n\n$mat-light-theme-background: (\n  background:               $light-background,\n  status-bar:               $light-bg-darker-20,\n  app-bar:                  $light-bg-darker-5,\n  hover:                    $dark-bg-alpha-4,\n  card:                     $light-bg-lighter-5,\n  dialog:                   $light-bg-lighter-5,\n  tooltip:                  $dark-bg-tooltip,\n  disabled-button:          $dark-bg-alpha-12,\n  raised-button:            $light-bg-lighter-5,\n  focused-button:           $dark-focused,\n  selected-button:          $light-bg-darker-20,\n  selected-disabled-button: $light-bg-darker-30,\n  disabled-button-toggle:   $light-bg-darker-10,\n  unselected-chip:          $light-bg-darker-10,\n  disabled-list-option:     $light-bg-darker-10,\n);\n\n// Dark bg\n$dark-background:     #2c2c2c;\n$dark-bg-lighter-5:   lighten($dark-background, 5%);\n$dark-bg-lighter-10:  lighten($dark-background, 10%);\n$dark-bg-lighter-20:  lighten($dark-background, 20%);\n$dark-bg-lighter-30:  lighten($dark-background, 30%);\n$light-bg-alpha-4:    rgba(#fafafa, 0.04);\n$light-bg-alpha-12:   rgba(#fafafa, 0.12);\n\n// Background palette for dark themes.\n$mat-dark-theme-background: (\n  background:               $dark-background,\n  status-bar:               $dark-bg-lighter-20,\n  app-bar:                  $dark-bg-lighter-5,\n  hover:                    $light-bg-alpha-4,\n  card:                     $dark-bg-lighter-5,\n  dialog:                   $dark-bg-lighter-5,\n  tooltip:                  $dark-bg-lighter-20,\n  disabled-button:          $light-bg-alpha-12,\n  raised-button:            $dark-bg-lighter-5,\n  focused-button:           $light-focused,\n  selected-button:          $dark-bg-lighter-20,\n  selected-disabled-button: $dark-bg-lighter-30,\n  disabled-button-toggle:   $dark-bg-lighter-10,\n  unselected-chip:          $dark-bg-lighter-20,\n  disabled-list-option:     $dark-bg-lighter-10,\n);\n\n// Compute font config\n@include mat.core($fontConfig);\n\n// Theme Config\n\nbody {\n  --primary-color: #380b4f;\n  --primary-lighter-color: #c3b6ca;\n  --primary-darker-color: #240636;\n  --text-primary-color: #{$light-primary-text};\n  --text-primary-lighter-color: #{$dark-primary-text};\n  --text-primary-darker-color: #{$light-primary-text};\n}   \n$mat-primary: (\n  main: #380b4f,\n  lighter: #c3b6ca,\n  darker: #240636,\n  200: #380b4f, // For slide toggle,\n  contrast : (\n    main: $light-primary-text,\n    lighter: $dark-primary-text,\n    darker: $light-primary-text,\n  )\n);\n$theme-primary: mat.define-palette($mat-primary, main, lighter, darker);\n\nbody {\n  --accent-color: #95d6c7;\n  --accent-lighter-color: #dff3ee;\n  --accent-darker-color: #78c6b3;\n  --text-accent-color: #{$dark-primary-text};\n  --text-accent-lighter-color: #{$dark-primary-text};\n  --text-accent-darker-color: #{$dark-primary-text};\n}   \n$mat-accent: (\n  main: #95d6c7,\n  lighter: #dff3ee,\n  darker: #78c6b3,\n  200: #95d6c7, // For slide toggle,\n  contrast : (\n    main: $dark-primary-text,\n    lighter: $dark-primary-text,\n    darker: $dark-primary-text,\n  )\n);\n$theme-accent: mat.define-palette($mat-accent, main, lighter, darker);\n\nbody {\n  --warn-color: #ff0000;\n  --warn-lighter-color: #ffb3b3;\n  --warn-darker-color: #ff0000;\n  --text-warn-color: #{$light-primary-text};\n  --text-warn-lighter-color: #{$dark-primary-text};\n  --text-warn-darker-color: #{$light-primary-text};\n}   \n$mat-warn: (\n  main: #ff0000,\n  lighter: #ffb3b3,\n  darker: #ff0000,\n  200: #ff0000, // For slide toggle,\n  contrast : (\n    main: $light-primary-text,\n    lighter: $dark-primary-text,\n    darker: $light-primary-text,\n  )\n);\n$theme-warn: mat.define-palette($mat-warn, main, lighter, darker);;\n\n$theme: (\n  primary: $theme-primary,\n  accent: $theme-accent,\n  warn: $theme-warn,\n  is-dark: false,\n  foreground: $mat-light-theme-foreground,\n  background: $mat-light-theme-background,\n);\n$altTheme: (\n  primary: $theme-primary,\n  accent: $theme-accent,\n  warn: $theme-warn,\n  is-dark: true,\n  foreground: $mat-dark-theme-foreground,\n  background: $mat-dark-theme-background,\n);\n\n// Theme Init\n@include mat.all-component-themes($theme);\n\n.theme-alternate {\n  @include mat.all-component-themes($altTheme);\n}\n\n// Specific component overrides, pieces that are not in line with the general theming\n\n// Handle buttons appropriately, with respect to line-height\n.mat-raised-button, .mat-stroked-button, .mat-flat-button {\n  padding: 0 1.15em;\n  margin: 0 .65em;\n  min-width: 3em;\n  line-height: 36.4px\n}\n\n.mat-standard-chip {\n  padding: .5em .85em;\n  min-height: 2.5em;\n}\n\n.material-icons {\n  font-size: 24px;\n  font-family: 'Material Icons', 'Material Icons';  \n  .mat-badge-content {\n    font-family: 'Roboto';\n  }\n}\n\n\n\n/**\n* Generated theme by Material Theme Generator\n* https://materialtheme.arcsine.dev\n* Fork at: https://materialtheme.arcsine.dev/?c=YHBhbGV0dGU$YHByaW1hcnk$YF48IzMzNTFjYyIsIj9lcjwjYzJjYmYwIiwiO2VyPCMyMDM3Yjl$LCIlPmBePCM3NGM4NzEiLCI~ZXI8I2Q1ZWZkNCIsIjtlcjwjNTdiNDU0fiwid2Fybj5gXjwjZmYwZTAwIiwiP2VyPCNmZmI3YjMiLCI7ZXI8I2ZmMDgwMH4sIj9UZXh0PCMwMDAwMDAiLCI~PTwjZmFmYWZhIiwiO1RleHQ8I2ZmZmZmZiIsIjs9PCMyYzJjMmN$LCJmb250cz5bYEA8KC00fixgQDwoLTN$LGBAPCgtMn4sYEA8KC0xfixgQDxoZWFkbGluZX4sYEA8dGl0bGV$LGBAPHN1YiktMn4sYEA8c3ViKS0xfixgQDxib2R5LTJ$LGBAPGJvZHktMX4sYEA8YnV0dG9ufixgQDxjYXB0aW9ufixgQDxpbnB1dCIsInNpemU$bnVsbH1dLCJpY29uczxGaWxsZWQiLCI~bmVzcz50cnVlLCJ2ZXJzaW9uPjEyfQ==\n*/\n\n// @use '~@angular/material' as mat;\n\n// // Include the common styles for Angular Material. We include this here so that you only\n// // have to load a single css file for Angular Material in your app.\n\n// // Fonts\n// @import 'https://fonts.googleapis.com/css?family=Material+Icons';\n// @import url('https://fonts.googleapis.com/css?family=Roboto:300,400,500');\n     \n// $fontConfig: (\n//   display-4: mat.define-typography-level(112px, 112px, 300, 'Roboto', -0.0134em),\n//   display-3: mat.define-typography-level(56px, 56px, 400, 'Roboto', -0.0089em),\n//   display-2: mat.define-typography-level(45px, 48px, 400, 'Roboto', 0.0000em),\n//   display-1: mat.define-typography-level(34px, 40px, 400, 'Roboto', 0.0074em),\n//   headline: mat.define-typography-level(24px, 32px, 400, 'Roboto', 0.0000em),\n//   title: mat.define-typography-level(20px, 32px, 500, 'Roboto', 0.0075em),\n//   subheading-2: mat.define-typography-level(16px, 28px, 400, 'Roboto', 0.0094em),\n//   subheading-1: mat.define-typography-level(15px, 24px, 500, 'Roboto', 0.0067em),\n//   body-2: mat.define-typography-level(14px, 24px, 500, 'Roboto', 0.0179em),\n//   body-1: mat.define-typography-level(14px, 20px, 400, 'Roboto', 0.0179em),\n//   button: mat.define-typography-level(14px, 14px, 500, 'Roboto', 0.0893em),\n//   caption: mat.define-typography-level(12px, 20px, 400, 'Roboto', 0.0333em),\n//   input: mat.define-typography-level(inherit, 1.125, 400, 'Roboto', 1.5px)\n// );\n\n// // Foreground Elements\n\n// // Light Theme Text\n// $dark-text: #000000;\n// $dark-primary-text: rgba($dark-text, 0.87);\n// $dark-accent-text: rgba($dark-primary-text, 0.54);\n// $dark-disabled-text: rgba($dark-primary-text, 0.38);\n// $dark-dividers: rgba($dark-primary-text, 0.12);\n// $dark-focused: rgba($dark-primary-text, 0.12);\n\n// $mat-light-theme-foreground: (\n//   base:              black,\n//   divider:           $dark-dividers,\n//   dividers:          $dark-dividers,\n//   disabled:          $dark-disabled-text,\n//   disabled-button:   rgba($dark-text, 0.26),\n//   disabled-text:     $dark-disabled-text,\n//   elevation:         black,\n//   secondary-text:    $dark-accent-text,\n//   hint-text:         $dark-disabled-text,\n//   accent-text:       $dark-accent-text,\n//   icon:              $dark-accent-text,\n//   icons:             $dark-accent-text,\n//   text:              $dark-primary-text,\n//   slider-min:        $dark-primary-text,\n//   slider-off:        rgba($dark-text, 0.26),\n//   slider-off-active: $dark-disabled-text,\n// );\n\n// // Dark Theme text\n// $light-text: #ffffff;\n// $light-primary-text: $light-text;\n// $light-accent-text: rgba($light-primary-text, 0.7);\n// $light-disabled-text: rgba($light-primary-text, 0.5);\n// $light-dividers: rgba($light-primary-text, 0.12);\n// $light-focused: rgba($light-primary-text, 0.12);\n\n// $mat-dark-theme-foreground: (\n//   base:              $light-text,\n//   divider:           $light-dividers,\n//   dividers:          $light-dividers,\n//   disabled:          $light-disabled-text,\n//   disabled-button:   rgba($light-text, 0.3),\n//   disabled-text:     $light-disabled-text,\n//   elevation:         black,\n//   hint-text:         $light-disabled-text,\n//   secondary-text:    $light-accent-text,\n//   accent-text:       $light-accent-text,\n//   icon:              $light-text,\n//   icons:             $light-text,\n//   text:              $light-text,\n//   slider-min:        $light-text,\n//   slider-off:        rgba($light-text, 0.3),\n//   slider-off-active: rgba($light-text, 0.3),\n// );\n\n// // Background config\n// // Light bg\n// $light-background:    #f7f7f8;\n// $light-bg-darker-5:   darken($light-background, 5%);\n// $light-bg-darker-10:  darken($light-background, 10%);\n// $light-bg-darker-20:  darken($light-background, 20%);\n// $light-bg-darker-30:  darken($light-background, 30%);\n// $light-bg-lighter-5:  lighten($light-background, 5%);\n// $dark-bg-tooltip:     lighten(#2c2c2c, 20%);\n// $dark-bg-alpha-4:     rgba(#2c2c2c, 0.04);\n// $dark-bg-alpha-12:    rgba(#2c2c2c, 0.12);\n\n// $mat-light-theme-background: (\n//   background:               $light-background,\n//   status-bar:               $light-bg-darker-20,\n//   app-bar:                  $light-bg-darker-5,\n//   hover:                    $dark-bg-alpha-4,\n//   card:                     $light-bg-lighter-5,\n//   dialog:                   $light-bg-lighter-5,\n//   tooltip:                  $dark-bg-tooltip,\n//   disabled-button:          $dark-bg-alpha-12,\n//   raised-button:            $light-bg-lighter-5,\n//   focused-button:           $dark-focused,\n//   selected-button:          $light-bg-darker-20,\n//   selected-disabled-button: $light-bg-darker-30,\n//   disabled-button-toggle:   $light-bg-darker-10,\n//   unselected-chip:          $light-bg-darker-10,\n//   disabled-list-option:     $light-bg-darker-10,\n// );\n\n// // Dark bg\n// $dark-background:     #2c2c2c;\n// $dark-bg-lighter-5:   lighten($dark-background, 5%);\n// $dark-bg-lighter-10:  lighten($dark-background, 10%);\n// $dark-bg-lighter-20:  lighten($dark-background, 20%);\n// $dark-bg-lighter-30:  lighten($dark-background, 30%);\n// $light-bg-alpha-4:    rgba(#fafafa, 0.04);\n// $light-bg-alpha-12:   rgba(#fafafa, 0.12);\n\n// // Background palette for dark themes.\n// $mat-dark-theme-background: (\n//   background:               $dark-background,\n//   status-bar:               $dark-bg-lighter-20,\n//   app-bar:                  $dark-bg-lighter-5,\n//   hover:                    $light-bg-alpha-4,\n//   card:                     $dark-bg-lighter-5,\n//   dialog:                   $dark-bg-lighter-5,\n//   tooltip:                  $dark-bg-lighter-20,\n//   disabled-button:          $light-bg-alpha-12,\n//   raised-button:            $dark-bg-lighter-5,\n//   focused-button:           $light-focused,\n//   selected-button:          $dark-bg-lighter-20,\n//   selected-disabled-button: $dark-bg-lighter-30,\n//   disabled-button-toggle:   $dark-bg-lighter-10,\n//   unselected-chip:          $dark-bg-lighter-20,\n//   disabled-list-option:     $dark-bg-lighter-10,\n// );\n\n// // Compute font config\n// @include mat.core($fontConfig);\n\n// // Theme Config\n\n// body {\n//   --primary-color: #3351cc;\n//   --primary-lighter-color: #c2cbf0;\n//   --primary-darker-color: #2037b9;\n//   --text-primary-color: #{$light-primary-text};\n//   --text-primary-lighter-color: #{$dark-primary-text};\n//   --text-primary-darker-color: #{$light-primary-text};\n// }   \n// $mat-primary: (\n//   main: #3351cc,\n//   lighter: #c2cbf0,\n//   darker: #2037b9,\n//   200: #3351cc, // For slide toggle,\n//   contrast : (\n//     main: $light-primary-text,\n//     lighter: $dark-primary-text,\n//     darker: $light-primary-text,\n//   )\n// );\n// $theme-primary: mat.define-palette($mat-primary, main, lighter, darker);\n\n// body {\n//   --accent-color: #74c871;\n//   --accent-lighter-color: #d5efd4;\n//   --accent-darker-color: #57b454;\n//   --text-accent-color: #{$dark-primary-text};\n//   --text-accent-lighter-color: #{$dark-primary-text};\n//   --text-accent-darker-color: #{$dark-primary-text};\n// }   \n// $mat-accent: (\n//   main: #74c871,\n//   lighter: #d5efd4,\n//   darker: #57b454,\n//   200: #74c871, // For slide toggle,\n//   contrast : (\n//     main: $dark-primary-text,\n//     lighter: $dark-primary-text,\n//     darker: $dark-primary-text,\n//   )\n// );\n// $theme-accent: mat.define-palette($mat-accent, main, lighter, darker);\n\n// body {\n//   --warn-color: #ff0e00;\n//   --warn-lighter-color: #ffb7b3;\n//   --warn-darker-color: #ff0800;\n//   --text-warn-color: #{$light-primary-text};\n//   --text-warn-lighter-color: #{$dark-primary-text};\n//   --text-warn-darker-color: #{$light-primary-text};\n// }   \n// $mat-warn: (\n//   main: #ff0e00,\n//   lighter: #ffb7b3,\n//   darker: #ff0800,\n//   200: #ff0e00, // For slide toggle,\n//   contrast : (\n//     main: $light-primary-text,\n//     lighter: $dark-primary-text,\n//     darker: $light-primary-text,\n//   )\n// );\n// $theme-warn: mat.define-palette($mat-warn, main, lighter, darker);;\n\n// $theme: (\n//   primary: $theme-primary,\n//   accent: $theme-accent,\n//   warn: $theme-warn,\n//   is-dark: false,\n//   foreground: $mat-light-theme-foreground,\n//   background: $mat-light-theme-background,\n// );\n// $altTheme: (\n//   primary: $theme-primary,\n//   accent: $theme-accent,\n//   warn: $theme-warn,\n//   is-dark: true,\n//   foreground: $mat-dark-theme-foreground,\n//   background: $mat-dark-theme-background,\n// );\n\n// // Theme Init\n// @include mat.all-component-themes($theme);\n\n// .theme-alternate {\n//   @include mat.all-component-themes($altTheme);\n// }\n\n// // Specific component overrides, pieces that are not in line with the general theming\n\n// // Handle buttons appropriately, with respect to line-height\n// .mat-raised-button, .mat-stroked-button, .mat-flat-button {\n//   padding: 0 1.15em;\n//   margin: 0 .65em;\n//   min-width: 3em;\n//   line-height: 36.4px\n// }\n\n// .mat-standard-chip {\n//   padding: .5em .85em;\n//   min-height: 2.5em;\n// }\n\n// .material-icons {\n//   font-size: 24px;\n//   font-family: 'Material Icons', 'Material Icons';\n//   .mat-badge-content {\n//     font-family: 'Roboto';\n//   }\n// }\n\n// /**\n// * Generated theme by Material Theme Generator\n// * https://materialtheme.arcsine.dev\n// */\n\n// @use \"sass:map\";\n// @import '~@angular/material/theming';\n// // Include the common styles for Angular Material. We include this here so that you only\n// // have to load a single css file for Angular Material in your app.\n\n// // Fonts\n// @import 'https://fonts.googleapis.com/css?family=Material+Icons';\n// @import url('https://fonts.googleapis.com/css?family=Roboto:300,400,500');\n\n// $fontConfig: (\n//   display-4: mat-typography-level(112px, 112px, 300, 'Roboto', -0.0134em),\n//   display-3: mat-typography-level(56px, 56px, 400, 'Roboto', -0.0089em),\n//   display-2: mat-typography-level(45px, 48px, 400, 'Roboto', 0.0000em),\n//   display-1: mat-typography-level(34px, 40px, 400, 'Roboto', 0.0074em),\n//   headline: mat-typography-level(24px, 32px, 400, 'Roboto', 0.0000em),\n//   title: mat-typography-level(20px, 32px, 500, 'Roboto', 0.0075em),\n//   subheading-2: mat-typography-level(16px, 28px, 400, 'Roboto', 0.0094em),\n//   subheading-1: mat-typography-level(15px, 24px, 500, 'Roboto', 0.0067em),\n//   body-2: mat-typography-level(14px, 24px, 500, 'Roboto', 0.0179em),\n//   body-1: mat-typography-level(14px, 20px, 400, 'Roboto', 0.0179em),\n//   button: mat-typography-level(14px, 14px, 500, 'Roboto', 0.0893em),\n//   caption: mat-typography-level(12px, 20px, 400, 'Roboto', 0.0333em),\n//   input: mat-typography-level(inherit, 1.125, 400, 'Roboto', 1.5px)\n// );\n\n// // Foreground Elements\n\n// // Light Theme Text\n// $dark-text: #000000;\n// $dark-primary-text: rgba($dark-text, 0.87);\n// $dark-accent-text: rgba($dark-primary-text, 0.54);\n// $dark-disabled-text: rgba($dark-primary-text, 0.38);\n// $dark-dividers: rgba($dark-primary-text, 0.12);\n// $dark-focused: rgba($dark-primary-text, 0.12);\n\n// $mat-light-theme-foreground: (\n//   base:              black,\n//   divider:           $dark-dividers,\n//   dividers:          $dark-dividers,\n//   disabled:          $dark-disabled-text,\n//   disabled-button:   rgba($dark-text, 0.26),\n//   disabled-text:     $dark-disabled-text,\n//   elevation:         black,\n//   secondary-text:    $dark-accent-text,\n//   hint-text:         $dark-disabled-text,\n//   accent-text:       $dark-accent-text,\n//   icon:              $dark-accent-text,\n//   icons:             $dark-accent-text,\n//   text:              $dark-primary-text,\n//   slider-min:        $dark-primary-text,\n//   slider-off:        rgba($dark-text, 0.26),\n//   slider-off-active: $dark-disabled-text,\n// );\n\n// // Dark Theme text\n// $light-text: #ffffff;\n// $light-primary-text: $light-text;\n// $light-accent-text: rgba($light-primary-text, 0.7);\n// $light-disabled-text: rgba($light-primary-text, 0.5);\n// $light-dividers: rgba($light-primary-text, 0.12);\n// $light-focused: rgba($light-primary-text, 0.12);\n\n// $mat-dark-theme-foreground: (\n//   base:              $light-text,\n//   divider:           $light-dividers,\n//   dividers:          $light-dividers,\n//   disabled:          $light-disabled-text,\n//   disabled-button:   rgba($light-text, 0.3),\n//   disabled-text:     $light-disabled-text,\n//   elevation:         black,\n//   hint-text:         $light-disabled-text,\n//   secondary-text:    $light-accent-text,\n//   accent-text:       $light-accent-text,\n//   icon:              $light-text,\n//   icons:             $light-text,\n//   text:              $light-text,\n//   slider-min:        $light-text,\n//   slider-off:        rgba($light-text, 0.3),\n//   slider-off-active: rgba($light-text, 0.3),\n// );\n\n// // Background config\n// // Light bg\n// $light-background:    #fafafa;\n// $light-bg-darker-5:   darken($light-background, 5%);\n// $light-bg-darker-10:  darken($light-background, 10%);\n// $light-bg-darker-20:  darken($light-background, 20%);\n// $light-bg-darker-30:  darken($light-background, 30%);\n// $light-bg-lighter-5:  lighten($light-background, 5%);\n// $dark-bg-tooltip:     lighten(#2c2c2c, 20%);\n// $dark-bg-alpha-4:     rgba(#2c2c2c, 0.04);\n// $dark-bg-alpha-12:    rgba(#2c2c2c, 0.12);\n\n// $mat-light-theme-background: (\n//   background:               $light-background,\n//   status-bar:               $light-bg-darker-20,\n//   app-bar:                  $light-bg-darker-5,\n//   hover:                    $dark-bg-alpha-4,\n//   card:                     $light-bg-lighter-5,\n//   dialog:                   $light-bg-lighter-5,\n//   tooltip:                  $dark-bg-tooltip,\n//   disabled-button:          $dark-bg-alpha-12,\n//   raised-button:            $light-bg-lighter-5,\n//   focused-button:           $dark-focused,\n//   selected-button:          $light-bg-darker-20,\n//   selected-disabled-button: $light-bg-darker-30,\n//   disabled-button-toggle:   $light-bg-darker-10,\n//   unselected-chip:          $light-bg-darker-10,\n//   disabled-list-option:     $light-bg-darker-10,\n// );\n\n// // Dark bg\n// $dark-background:     #2c2c2c;\n// $dark-bg-lighter-5:   lighten($dark-background, 5%);\n// $dark-bg-lighter-10:  lighten($dark-background, 10%);\n// $dark-bg-lighter-20:  lighten($dark-background, 20%);\n// $dark-bg-lighter-30:  lighten($dark-background, 30%);\n// $light-bg-alpha-4:    rgba(#fafafa, 0.04);\n// $light-bg-alpha-12:   rgba(#fafafa, 0.12);\n\n// // Background palette for dark themes.\n// $mat-dark-theme-background: (\n//   background:               $dark-background,\n//   status-bar:               $dark-bg-lighter-20,\n//   app-bar:                  $dark-bg-lighter-5,\n//   hover:                    $light-bg-alpha-4,\n//   card:                     $dark-bg-lighter-5,\n//   dialog:                   $dark-bg-lighter-5,\n//   tooltip:                  $dark-bg-lighter-20,\n//   disabled-button:          $light-bg-alpha-12,\n//   raised-button:            $dark-bg-lighter-5,\n//   focused-button:           $light-focused,\n//   selected-button:          $dark-bg-lighter-20,\n//   selected-disabled-button: $dark-bg-lighter-30,\n//   disabled-button-toggle:   $dark-bg-lighter-10,\n//   unselected-chip:          $dark-bg-lighter-20,\n//   disabled-list-option:     $dark-bg-lighter-10,\n// );\n\n// // Compute font config\n// @include mat-core($fontConfig);\n\n// // Theme Config\n\n// body {\n//   --primary-color: #33691e;\n//   --primary-lighter-color: #c2d2bc;\n//   --primary-darker-color: #204c12;\n//   --text-primary-color: #{$light-primary-text};\n//   --text-primary-lighter-color: #{$dark-primary-text};\n//   --text-primary-darker-color: #{$light-primary-text};\n// }\n\n// $mat-primary: (\n//   main: #33691e,\n//   lighter: #c2d2bc,\n//   darker: #204c12,\n//   200: #33691e, // For slide toggle,\n//   contrast : (\n//     main: $light-primary-text,\n//     lighter: $dark-primary-text,\n//     darker: $light-primary-text,\n//   )\n// );\n// $theme-primary: mat-palette($mat-primary, main, lighter, darker);\n\n// body {\n//   --accent-color: #795548;\n//   --accent-lighter-color: #d7ccc8;\n//   --accent-darker-color: #5c3b30;\n//   --text-accent-color: #{$light-primary-text};\n//   --text-accent-lighter-color: #{$dark-primary-text};\n//   --text-accent-darker-color: #{$light-primary-text};\n// }\n\n// $mat-accent: (\n//   main: #795548,\n//   lighter: #d7ccc8,\n//   darker: #5c3b30,\n//   200: #795548, // For slide toggle,\n//   contrast : (\n//     main: $light-primary-text,\n//     lighter: $dark-primary-text,\n//     darker: $light-primary-text,\n//   )\n// );\n// $theme-accent: mat-palette($mat-accent, main, lighter, darker);\n\n// body {\n//   --warn-color: #ff0000;\n//   --warn-lighter-color: #ffb3b3;\n//   --warn-darker-color: #ff0000;\n//   --text-warn-color: #{$light-primary-text};\n//   --text-warn-lighter-color: #{$dark-primary-text};\n//   --text-warn-darker-color: #{$light-primary-text};\n// }\n\n// $mat-warn: (\n//   main: #ff0000,\n//   lighter: #ffb3b3,\n//   darker: #ff0000,\n//   200: #ff0000, // For slide toggle,\n//   contrast : (\n//     main: $light-primary-text,\n//     lighter: $dark-primary-text,\n//     darker: $light-primary-text,\n//   )\n// );\n// $theme-warn: mat-palette($mat-warn, main, lighter, darker);;\n\n// $theme: mat-light-theme($theme-primary, $theme-accent, $theme-warn);\n// $altTheme: mat-dark-theme($theme-primary, $theme-accent, $theme-warn);\n\n// // Theme Init\n// @include angular-material-theme($theme);\n\n// .theme-alternate {\n//   @include angular-material-theme($altTheme);\n// }\n\n// // Specific component overrides, pieces that are not in line with the general theming\n\n// // Handle buttons appropriately, with respect to line-height\n// .mat-raised-button, .mat-stroked-button, .mat-flat-button {\n//   padding: 0 1.15em;\n//   margin: 0 .65em;\n//   min-width: 3em;\n//   line-height: 36.4px\n// }\n\n// .mat-standard-chip {\n//   padding: .5em .85em;\n//   min-height: 2.5em;\n// }\n\n// .material-icons {\n//   font-size: 24px;\n//   font-family: 'Material Icons', 'Material Icons';\n//   .mat-badge-content {\n//     font-family: 'Roboto';\n//   }\n// }\n\n// .mat-grid-tile{\n\n//     .mat-grid-tile-header {\n\n//         background: map.get($mat-accent, \"main\");\n//         h2 {\n//             @include mat-typography-level-to-styles($fontConfig, headline);\n//     }\n// }\n// }\n// .mat-dialog-content{\n// }\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../theming/theming';\n\n// Colors for the ripple elements.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $foreground-base: map.get($foreground, base);\n  $color-opacity: 0.1;\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (meta.type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $color-opacity;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../../theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: theming.get-color-from-palette(map.get($config, foreground), secondary-text);\n\n    &::after {\n      color: theming.get-color-from-palette($background, background);\n    }\n  }\n\n  .mat-pseudo-checkbox-disabled {\n    color: $disabled-color;\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, primary));\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, accent));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, warn));\n  }\n\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'theming/theming';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map.get($config, background);\n    $foreground: map.get($config, foreground);\n\n    background-color: theming.get-color-from-palette($background, background);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{elevation.$prefix}#{$zValue} {\n      @include private.private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @include ripple-theme.theme($theme);\n    @include option-theme.theme($theme);\n    @include optgroup-theme.theme($theme);\n    @include pseudo-checkbox-theme.theme($theme);\n\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'variables';\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.2), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 2px 1px -1px #{$shadow-color}',\n    2: '0px 3px 1px -2px #{$shadow-color}',\n    3: '0px 3px 3px -2px #{$shadow-color}',\n    4: '0px 2px 4px -1px #{$shadow-color}',\n    5: '0px 3px 5px -1px #{$shadow-color}',\n    6: '0px 3px 5px -1px #{$shadow-color}',\n    7: '0px 4px 5px -2px #{$shadow-color}',\n    8: '0px 5px 5px -3px #{$shadow-color}',\n    9: '0px 5px 6px -3px #{$shadow-color}',\n    10: '0px 6px 6px -3px #{$shadow-color}',\n    11: '0px 6px 7px -4px #{$shadow-color}',\n    12: '0px 7px 8px -4px #{$shadow-color}',\n    13: '0px 7px 8px -4px #{$shadow-color}',\n    14: '0px 7px 9px -4px #{$shadow-color}',\n    15: '0px 8px 9px -5px #{$shadow-color}',\n    16: '0px 8px 10px -5px #{$shadow-color}',\n    17: '0px 8px 11px -5px #{$shadow-color}',\n    18: '0px 9px 11px -5px #{$shadow-color}',\n    19: '0px 9px 12px -6px #{$shadow-color}',\n    20: '0px 10px 13px -6px #{$shadow-color}',\n    21: '0px 10px 13px -6px #{$shadow-color}',\n    22: '0px 10px 14px -6px #{$shadow-color}',\n    23: '0px 11px 14px -7px #{$shadow-color}',\n    24: '0px 11px 15px -7px #{$shadow-color}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.14), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 1px 0px #{$shadow-color}',\n    2: '0px 2px 2px 0px #{$shadow-color}',\n    3: '0px 3px 4px 0px #{$shadow-color}',\n    4: '0px 4px 5px 0px #{$shadow-color}',\n    5: '0px 5px 8px 0px #{$shadow-color}',\n    6: '0px 6px 10px 0px #{$shadow-color}',\n    7: '0px 7px 10px 1px #{$shadow-color}',\n    8: '0px 8px 10px 1px #{$shadow-color}',\n    9: '0px 9px 12px 1px #{$shadow-color}',\n    10: '0px 10px 14px 1px #{$shadow-color}',\n    11: '0px 11px 15px 1px #{$shadow-color}',\n    12: '0px 12px 17px 2px #{$shadow-color}',\n    13: '0px 13px 19px 2px #{$shadow-color}',\n    14: '0px 14px 21px 2px #{$shadow-color}',\n    15: '0px 15px 22px 2px #{$shadow-color}',\n    16: '0px 16px 24px 2px #{$shadow-color}',\n    17: '0px 17px 26px 2px #{$shadow-color}',\n    18: '0px 18px 28px 2px #{$shadow-color}',\n    19: '0px 19px 29px 2px #{$shadow-color}',\n    20: '0px 20px 31px 3px #{$shadow-color}',\n    21: '0px 21px 33px 3px #{$shadow-color}',\n    22: '0px 22px 35px 3px #{$shadow-color}',\n    23: '0px 23px 36px 3px #{$shadow-color}',\n    24: '0px 24px 38px 3px #{$shadow-color}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.12), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 3px 0px #{$shadow-color}',\n    2: '0px 1px 5px 0px #{$shadow-color}',\n    3: '0px 1px 8px 0px #{$shadow-color}',\n    4: '0px 1px 10px 0px #{$shadow-color}',\n    5: '0px 1px 14px 0px #{$shadow-color}',\n    6: '0px 1px 18px 0px #{$shadow-color}',\n    7: '0px 2px 16px 1px #{$shadow-color}',\n    8: '0px 3px 14px 2px #{$shadow-color}',\n    9: '0px 3px 16px 2px #{$shadow-color}',\n    10: '0px 4px 18px 3px #{$shadow-color}',\n    11: '0px 4px 20px 3px #{$shadow-color}',\n    12: '0px 5px 22px 4px #{$shadow-color}',\n    13: '0px 5px 24px 4px #{$shadow-color}',\n    14: '0px 5px 26px 4px #{$shadow-color}',\n    15: '0px 6px 28px 5px #{$shadow-color}',\n    16: '0px 6px 30px 5px #{$shadow-color}',\n    17: '0px 6px 32px 5px #{$shadow-color}',\n    18: '0px 7px 34px 6px #{$shadow-color}',\n    19: '0px 7px 36px 6px #{$shadow-color}',\n    20: '0px 8px 38px 7px #{$shadow-color}',\n    21: '0px 8px 40px 7px #{$shadow-color}',\n    22: '0px 8px 42px 7px #{$shadow-color}',\n    23: '0px 9px 44px 8px #{$shadow-color}',\n    24: '0px 9px 46px 8px #{$shadow-color}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$transition-timing-function: variables.$fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin elevation($zValue, $color: $color, $opacity: $opacity) {\n  @if meta.type-of($zValue) != number or not math.is-unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map.get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin overridable-elevation(\n    $zValue,\n    $color: $color,\n    $opacity: $opacity) {\n  &:not([class*='#{$prefix}']) {\n    @include elevation($zValue, $color, $opacity);\n  }\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function private-transition-property-value(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin elevation-transition(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  transition: private-transition-property-value($duration, $easing);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-autocomplete-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: theming.get-color-from-palette($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: theming.get-color-from-palette($foreground, text);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-autocomplete') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './button-toggle-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $divider-color: theming.get-color-from-palette($foreground, divider);\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include private.private-theme-elevation(2, $config);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    box-shadow: none;\n  }\n\n  .mat-button-toggle {\n    color: theming.get-color-from-palette($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: theming.get-color-from-palette($foreground, text);\n    background: theming.get-color-from-palette($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: theming.get-color-from-palette($background, selected-button);\n    color: theming.get-color-from-palette($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n    background-color: theming.get-color-from-palette($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: theming.get-color-from-palette($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: theming.get-color-from-palette($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button-toggle {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $standard-height: compatibility.private-density-prop-value(\n      button-toggle-variables.$standard-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n      line-height: $standard-height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-divider {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-divider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@mixin private-expansion-focus {\n  .mat-expansion-panel {\n    & .mat-expansion-panel-header.cdk-keyboard-focused,\n    & .mat-expansion-panel-header.cdk-program-focused,\n    &:not(.mat-expanded) .mat-expansion-panel-header:hover {\n      &:not([aria-disabled='true']) {\n        @content;\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin private-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function private-control-placeholder-color($config) {\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  @return theming.get-color-from-palette($foreground, secondary-text,\n    if($is-dark-theme, 0.5, 0.42));\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin standard-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin standard-typography($config-or-theme) {}\n\n@mixin private-form-field-standard-density($config-or-theme) {}\n\n@mixin standard-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-standard') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include standard-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-standard-density($density);\n    }\n    @if $typography != null {\n      @include standard-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: theming.get-color-from-palette($primary, text);\n    }\n\n    &.mat-accent {\n      color: theming.get-color-from-palette($accent, text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","// stylelint-disable material/no-prefixes\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  -moz-user-select: $value;\n  -ms-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin cursor-grab {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n@mixin cursor-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n\n@mixin position-sticky($important: false) {\n  position: -webkit-sticky #{if($important, '!important', '')};\n  position: sticky #{if($important, '!important', '')};\n}\n// stylelint-enable\n","@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:color';\n@use '../core/theming/theming';\n\n// Approximates the correct buffer color by using a mix between the theme color\n// and the theme's background color.\n@function _get-buffer-color($theme, $background) {\n  $theme-color: theming.get-color-from-palette($theme);\n  // Return fallback color if the theme uses variables to define colors.\n  @if (meta.type-of($theme-color) != 'color' or meta.type-of($background) != 'color') {\n    @return theming.get-color-from-palette($theme, lighter);\n  }\n  @return color.mix($theme-color, $background, $weight: 25%);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get(map.get($config, background), background);\n\n  .mat-progress-bar-background {\n    fill: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: theming.get-color-from-palette($palette);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _color($primary);\n    }\n\n    &.mat-accent {\n      @include _color($accent);\n    }\n\n    &.mat-warn {\n      @include _color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: theming.get-color-from-palette($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map.get($foreground, base);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-radio-button {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $drawer-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-container-background-color:  theming.get-color-from-palette($background, background);\n  $drawer-push-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-side-border: solid 1px theming.get-color-from-palette($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include private.private-theme-elevation(16, $config);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    $opacity: 0.6;\n    $backdrop-color: theming.get-color-from-palette($background, card, $opacity);\n\n    @if (meta.type-of($backdrop-color) == color) {\n      // We use invert() here to have the darken the background color expected to be used. If the\n      // background is light, we use a dark backdrop. If the background is dark,\n      // we use a light backdrop.\n      background-color: color.invert($backdrop-color);\n    }\n    @else {\n      // If we couldn't resolve the backdrop color to a color value, fall back to using\n      // `opacity` to make it opaque since its end value could be a solid color.\n      background-color: $backdrop-color;\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sidenav') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _checked-color($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we partially keep the old behavior that is based on\n  // the previous specifications. For the checked color we always use the `default` hue because\n  // that follows MDC and also makes it easier for people to create a custom theme without needing\n  // to specify each hue individually.\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: default;\n\n  $bar-unchecked-color: theming.get-color-from-palette($foreground, disabled);\n  $ripple-unchecked-color: theming.get-color-from-palette($foreground, base);\n\n  .mat-slide-toggle {\n    @include _checked-color($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _checked-color($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _checked-color($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include private.private-theme-elevation(1, $config);\n    background-color: theming.get-color-from-palette(palette.$grey-palette, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slide-toggle-content {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: theming.get-color-from-palette($background, 'card');\n    $text-color: theming.get-color-from-palette($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (meta.type-of($table-background) == color and meta.type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: color.mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(MaterialIcons-Regular.eot); /* For IE6-8 */\n  src: local('Material Icons'),\n       local('MaterialIcons-Regular'),\n       url(MaterialIcons-Regular.woff2) format('woff2'),\n       url(MaterialIcons-Regular.woff) format('woff'),\n       url(MaterialIcons-Regular.ttf) format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n"],"sourceRoot":"webpack:///"}